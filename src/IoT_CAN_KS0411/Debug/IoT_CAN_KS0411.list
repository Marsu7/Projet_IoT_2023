
IoT_CAN_KS0411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004388  08004388  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004390  08004390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08004408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004408  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dca3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa4  00000000  00000000  0002dd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  00030740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a7b  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c79d  00000000  00000000  00053b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc5db  00000000  00000000  000602e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c8c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000312c  00000000  00000000  0012c918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800425c 	.word	0x0800425c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800425c 	.word	0x0800425c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80005ae:	2300      	movs	r3, #0
 80005b0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80005b2:	2300      	movs	r3, #0
 80005b4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 80005ce:	2300      	movs	r3, #0
 80005d0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80005d2:	2300      	movs	r3, #0
 80005d4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80005e2:	2308      	movs	r3, #8
 80005e4:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80005ee:	2300      	movs	r3, #0
 80005f0:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80005f2:	2300      	movs	r3, #0
 80005f4:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000622:	2308      	movs	r3, #8
 8000624:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800062e:	f000 f939 	bl	80008a4 <MCP2515_Initialize>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <CANSPI_Initialize+0x94>
    return 0;
 8000638:	2300      	movs	r3, #0
 800063a:	e058      	b.n	80006ee <CANSPI_Initialize+0x146>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 800063c:	f000 f954 	bl	80008e8 <MCP2515_SetConfigMode>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d101      	bne.n	800064a <CANSPI_Initialize+0xa2>
    return 0;
 8000646:	2300      	movs	r3, #0
 8000648:	e051      	b.n	80006ee <CANSPI_Initialize+0x146>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	461a      	mov	r2, r3
 800064e:	2123      	movs	r1, #35	; 0x23
 8000650:	2020      	movs	r0, #32
 8000652:	f000 f9ed 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000656:	463b      	mov	r3, r7
 8000658:	461a      	mov	r2, r3
 800065a:	2127      	movs	r1, #39	; 0x27
 800065c:	2024      	movs	r0, #36	; 0x24
 800065e:	f000 f9e7 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	461a      	mov	r2, r3
 8000668:	2103      	movs	r1, #3
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f9e0 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000670:	f107 0318 	add.w	r3, r7, #24
 8000674:	461a      	mov	r2, r3
 8000676:	2107      	movs	r1, #7
 8000678:	2004      	movs	r0, #4
 800067a:	f000 f9d9 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	461a      	mov	r2, r3
 8000684:	210b      	movs	r1, #11
 8000686:	2008      	movs	r0, #8
 8000688:	f000 f9d2 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	461a      	mov	r2, r3
 8000692:	2113      	movs	r1, #19
 8000694:	2010      	movs	r0, #16
 8000696:	f000 f9cb 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	461a      	mov	r2, r3
 80006a0:	2117      	movs	r1, #23
 80006a2:	2014      	movs	r0, #20
 80006a4:	f000 f9c4 	bl	8000a30 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	461a      	mov	r2, r3
 80006ae:	211b      	movs	r1, #27
 80006b0:	2018      	movs	r0, #24
 80006b2:	f000 f9bd 	bl	8000a30 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80006b6:	2104      	movs	r1, #4
 80006b8:	2060      	movs	r0, #96	; 0x60
 80006ba:	f000 f995 	bl	80009e8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80006be:	2101      	movs	r1, #1
 80006c0:	2070      	movs	r0, #112	; 0x70
 80006c2:	f000 f991 	bl	80009e8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80006c6:	2100      	movs	r1, #0
 80006c8:	202a      	movs	r0, #42	; 0x2a
 80006ca:	f000 f98d 	bl	80009e8 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0x90);
 80006ce:	2190      	movs	r1, #144	; 0x90
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 f989 	bl	80009e8 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 80006d6:	2182      	movs	r1, #130	; 0x82
 80006d8:	2028      	movs	r0, #40	; 0x28
 80006da:	f000 f985 	bl	80009e8 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80006de:	f000 f921 	bl	8000924 <MCP2515_SetNormalMode>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <CANSPI_Initialize+0x144>
    return 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e000      	b.n	80006ee <CANSPI_Initialize+0x146>
  
  return 1;
 80006ec:	2301      	movs	r3, #1
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <CANSPI_Receive>:
  return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b088      	sub	sp, #32
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000702:	f000 f9bf 	bl	8000a84 <MCP2515_GetRxStatus>
 8000706:	4603      	mov	r3, r0
 8000708:	733b      	strb	r3, [r7, #12]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 800070a:	7b3b      	ldrb	r3, [r7, #12]
 800070c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d066      	beq.n	80007e4 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000716:	7b3b      	ldrb	r3, [r7, #12]
 8000718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b40      	cmp	r3, #64	; 0x40
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7b3b      	ldrb	r3, [r7, #12]
 800072a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2bc0      	cmp	r3, #192	; 0xc0
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	220d      	movs	r2, #13
 8000748:	4619      	mov	r1, r3
 800074a:	2090      	movs	r0, #144	; 0x90
 800074c:	f000 f92a 	bl	80009a4 <MCP2515_ReadRxSequence>
 8000750:	e00c      	b.n	800076c <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000752:	7b3b      	ldrb	r3, [r7, #12]
 8000754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b80      	cmp	r3, #128	; 0x80
 800075c:	d106      	bne.n	800076c <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	220d      	movs	r2, #13
 8000764:	4619      	mov	r1, r3
 8000766:	2094      	movs	r0, #148	; 0x94
 8000768:	f000 f91c 	bl	80009a4 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800076c:	7b3b      	ldrb	r3, [r7, #12]
 800076e:	f003 0318 	and.w	r3, r3, #24
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b10      	cmp	r3, #16
 8000776:	d10c      	bne.n	8000792 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800077e:	7cb8      	ldrb	r0, [r7, #18]
 8000780:	7cf9      	ldrb	r1, [r7, #19]
 8000782:	7c3a      	ldrb	r2, [r7, #16]
 8000784:	7c7b      	ldrb	r3, [r7, #17]
 8000786:	f000 f832 	bl	80007ee <convertReg2ExtendedCANid>
 800078a:	4602      	mov	r2, r0
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	e00b      	b.n	80007aa <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000798:	7c3b      	ldrb	r3, [r7, #16]
 800079a:	7c7a      	ldrb	r2, [r7, #17]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f863 	bl	800086a <convertReg2StandardCANid>
 80007a4:	4602      	mov	r2, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80007aa:	7d3a      	ldrb	r2, [r7, #20]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80007b0:	7d7a      	ldrb	r2, [r7, #21]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80007b6:	7dba      	ldrb	r2, [r7, #22]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80007bc:	7dfa      	ldrb	r2, [r7, #23]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80007c2:	7e3a      	ldrb	r2, [r7, #24]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80007c8:	7e7a      	ldrb	r2, [r7, #25]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80007ce:	7eba      	ldrb	r2, [r7, #26]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80007d4:	7efa      	ldrb	r2, [r7, #27]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80007da:	7f3a      	ldrb	r2, [r7, #28]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80007e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80007ee:	b490      	push	{r4, r7}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4604      	mov	r4, r0
 80007f6:	4608      	mov	r0, r1
 80007f8:	4611      	mov	r1, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	4623      	mov	r3, r4
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4603      	mov	r3, r0
 8000802:	71bb      	strb	r3, [r7, #6]
 8000804:	460b      	mov	r3, r1
 8000806:	717b      	strb	r3, [r7, #5]
 8000808:	4613      	mov	r3, r2
 800080a:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000814:	793b      	ldrb	r3, [r7, #4]
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800081c:	793b      	ldrb	r3, [r7, #4]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000822:	797b      	ldrb	r3, [r7, #5]
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4413      	add	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4413      	add	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4413      	add	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4413      	add	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800085e:	697b      	ldr	r3, [r7, #20]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bc90      	pop	{r4, r7}
 8000868:	4770      	bx	lr

0800086a <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	460a      	mov	r2, r1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4613      	mov	r3, r2
 8000878:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4413      	add	r3, r2
 8000890:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <MCP2515_Initialize>:

/* MCP2515 초기화 */


int MCP2515_Initialize(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80008aa:	2201      	movs	r2, #1
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MCP2515_Initialize+0x3c>)
 80008b0:	f000 ff52 	bl	8001758 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80008b4:	230a      	movs	r3, #10
 80008b6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80008b8:	480a      	ldr	r0, [pc, #40]	; (80008e4 <MCP2515_Initialize+0x40>)
 80008ba:	f002 f8f3 	bl	8002aa4 <HAL_SPI_GetState>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d101      	bne.n	80008c8 <MCP2515_Initialize+0x24>
      return 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e006      	b.n	80008d6 <MCP2515_Initialize+0x32>
    
    loop--;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f1      	bne.n	80008b8 <MCP2515_Initialize+0x14>
      
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020400 	.word	0x40020400
 80008e4:	20000098 	.word	0x20000098

080008e8 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
int MCP2515_SetConfigMode(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	200f      	movs	r0, #15
 80008f2:	f000 f879 	bl	80009e8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80008f6:	230a      	movs	r3, #10
 80008f8:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80008fa:	200e      	movs	r0, #14
 80008fc:	f000 f830 	bl	8000960 <MCP2515_ReadByte>
 8000900:	4603      	mov	r3, r0
 8000902:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000906:	2b80      	cmp	r3, #128	; 0x80
 8000908:	d101      	bne.n	800090e <MCP2515_SetConfigMode+0x26>
      return 1;
 800090a:	2301      	movs	r3, #1
 800090c:	e006      	b.n	800091c <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	3b01      	subs	r3, #1
 8000912:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1ef      	bne.n	80008fa <MCP2515_SetConfigMode+0x12>
  
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
int MCP2515_SetNormalMode(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800092a:	2100      	movs	r1, #0
 800092c:	200f      	movs	r0, #15
 800092e:	f000 f85b 	bl	80009e8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000932:	230a      	movs	r3, #10
 8000934:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000936:	200e      	movs	r0, #14
 8000938:	f000 f812 	bl	8000960 <MCP2515_ReadByte>
 800093c:	4603      	mov	r3, r0
 800093e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <MCP2515_SetNormalMode+0x26>
      return 1;
 8000946:	2301      	movs	r3, #1
 8000948:	e006      	b.n	8000958 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	3b01      	subs	r3, #1
 800094e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1ef      	bne.n	8000936 <MCP2515_SetNormalMode+0x12>
  
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800096a:	2200      	movs	r2, #0
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MCP2515_ReadByte+0x40>)
 8000970:	f000 fef2 	bl	8001758 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f8a1 	bl	8000abc <SPI_Tx>
  SPI_Tx(address);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f89d 	bl	8000abc <SPI_Tx>
  retVal = SPI_Rx();
 8000982:	f000 f8c1 	bl	8000b08 <SPI_Rx>
 8000986:	4603      	mov	r3, r0
 8000988:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800098a:	2201      	movs	r2, #1
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MCP2515_ReadByte+0x40>)
 8000990:	f000 fee2 	bl	8001758 <HAL_GPIO_WritePin>
  
  return retVal;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40020400 	.word	0x40020400

080009a4 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <MCP2515_ReadRxSequence+0x40>)
 80009ba:	f000 fecd 	bl	8001758 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f87b 	bl	8000abc <SPI_Tx>
  SPI_RxBuffer(data, length);
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	4619      	mov	r1, r3
 80009ca:	6838      	ldr	r0, [r7, #0]
 80009cc:	f000 f8ac 	bl	8000b28 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MCP2515_ReadRxSequence+0x40>)
 80009d6:	f000 febf 	bl	8001758 <HAL_GPIO_WritePin>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40020400 	.word	0x40020400

080009e8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MCP2515_WriteByte+0x44>)
 80009fe:	f000 feab 	bl	8001758 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000a02:	2002      	movs	r0, #2
 8000a04:	f000 f85a 	bl	8000abc <SPI_Tx>
  SPI_Tx(address);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f856 	bl	8000abc <SPI_Tx>
  SPI_Tx(data);  
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f852 	bl	8000abc <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MCP2515_WriteByte+0x44>)
 8000a1e:	f000 fe9b 	bl	8001758 <HAL_GPIO_WritePin>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020400 	.word	0x40020400

08000a30 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	603a      	str	r2, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000a40:	2200      	movs	r2, #0
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <MCP2515_WriteByteSequence+0x50>)
 8000a46:	f000 fe87 	bl	8001758 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f000 f836 	bl	8000abc <SPI_Tx>
  SPI_Tx(startAddress);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f832 	bl	8000abc <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000a58:	79ba      	ldrb	r2, [r7, #6]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	6838      	ldr	r0, [r7, #0]
 8000a68:	f000 f83a 	bl	8000ae0 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MCP2515_WriteByteSequence+0x50>)
 8000a72:	f000 fe71 	bl	8001758 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020400 	.word	0x40020400

08000a84 <MCP2515_GetRxStatus>:
  return retVal;
}

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <MCP2515_GetRxStatus+0x34>)
 8000a90:	f000 fe62 	bl	8001758 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8000a94:	20b0      	movs	r0, #176	; 0xb0
 8000a96:	f000 f811 	bl	8000abc <SPI_Tx>
  retVal = SPI_Rx();
 8000a9a:	f000 f835 	bl	8000b08 <SPI_Rx>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MCP2515_GetRxStatus+0x34>)
 8000aa8:	f000 fe56 	bl	8001758 <HAL_GPIO_WritePin>
  
  return retVal;
 8000aac:	79fb      	ldrb	r3, [r7, #7]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40020400 	.word	0x40020400

08000abc <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000ac6:	1df9      	adds	r1, r7, #7
 8000ac8:	230a      	movs	r3, #10
 8000aca:	2201      	movs	r2, #1
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <SPI_Tx+0x20>)
 8000ace:	f001 fbfa 	bl	80022c6 <HAL_SPI_Transmit>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	230a      	movs	r3, #10
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <SPI_TxBuffer+0x24>)
 8000af6:	f001 fbe6 	bl	80022c6 <HAL_SPI_Transmit>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000098 	.word	0x20000098

08000b08 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000b0e:	1df9      	adds	r1, r7, #7
 8000b10:	230a      	movs	r3, #10
 8000b12:	2201      	movs	r2, #1
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <SPI_Rx+0x1c>)
 8000b16:	f001 fd12 	bl	800253e <HAL_SPI_Receive>
  return retVal;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000098 	.word	0x20000098

08000b28 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	230a      	movs	r3, #10
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <SPI_RxBuffer+0x24>)
 8000b3e:	f001 fcfe 	bl	800253e <HAL_SPI_Receive>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000098 	.word	0x20000098

08000b50 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 8000b5a:	1df9      	adds	r1, r7, #7
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <__io_putchar+0x20>)
 8000b62:	f002 f92a 	bl	8002dba <HAL_UART_Transmit>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000f0 	.word	0x200000f0

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7a:	f000 fb01 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7e:	f000 f85d 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 f91b 	bl	8000dbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b86:	f000 f8b9 	bl	8000cfc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b8a:	f000 f8ed 	bl	8000d68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8000b8e:	f7ff fd0b 	bl	80005a8 <CANSPI_Initialize>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//printf("USART2 works fine !\n");
	if(CANSPI_Receive(&rxMessage))
 8000b92:	4825      	ldr	r0, [pc, #148]	; (8000c28 <main+0xb4>)
 8000b94:	f7ff fdaf 	bl	80006f6 <CANSPI_Receive>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d041      	beq.n	8000c22 <main+0xae>
	{
		//printf("Message receive !\n");
		/*printf("rxMessage: %d%d%d%d%d%d%d%d\n", rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
				                                rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
												rxMessage.frame.data6, rxMessage.frame.data7);*/
		printf("CAN id : %lx\n",rxMessage.frame.id);
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <main+0xb4>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4821      	ldr	r0, [pc, #132]	; (8000c2c <main+0xb8>)
 8000ba6:	f002 fc03 	bl	80033b0 <iprintf>
		switch(rxMessage.frame.id)
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <main+0xb4>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b5c      	cmp	r3, #92	; 0x5c
 8000bb0:	d026      	beq.n	8000c00 <main+0x8c>
 8000bb2:	2b5c      	cmp	r3, #92	; 0x5c
 8000bb4:	d8ed      	bhi.n	8000b92 <main+0x1e>
 8000bb6:	2b0c      	cmp	r3, #12
 8000bb8:	d002      	beq.n	8000bc0 <main+0x4c>
 8000bba:	2b0d      	cmp	r3, #13
 8000bbc:	d010      	beq.n	8000be0 <main+0x6c>
 8000bbe:	e031      	b.n	8000c24 <main+0xb0>
		{
			case 0x0C:
			{
				uint16_t regime_moteur = (rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <main+0xb4>)
 8000bc2:	7a5b      	ldrb	r3, [r3, #9]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <main+0xb4>)
 8000bca:	7a9b      	ldrb	r3, [r3, #10]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	807b      	strh	r3, [r7, #2]
				printf("Regime moteur : %d km/h\n", regime_moteur);
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4815      	ldr	r0, [pc, #84]	; (8000c30 <main+0xbc>)
 8000bda:	f002 fbe9 	bl	80033b0 <iprintf>
				break;
 8000bde:	e021      	b.n	8000c24 <main+0xb0>
			}
			case 0x0D:
			{
				uint16_t vitesse = (rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <main+0xb4>)
 8000be2:	7a5b      	ldrb	r3, [r3, #9]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <main+0xb4>)
 8000bea:	7a9b      	ldrb	r3, [r3, #10]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	80bb      	strh	r3, [r7, #4]
				printf("Vitesse: %d km/h\n", vitesse);
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480e      	ldr	r0, [pc, #56]	; (8000c34 <main+0xc0>)
 8000bfa:	f002 fbd9 	bl	80033b0 <iprintf>
				break;
 8000bfe:	e011      	b.n	8000c24 <main+0xb0>
			}
			case 0x5C:
			{
				uint16_t temperature_huile_moteur = (rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <main+0xb4>)
 8000c02:	7a5b      	ldrb	r3, [r3, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <main+0xb4>)
 8000c0a:	7a9b      	ldrb	r3, [r3, #10]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	80fb      	strh	r3, [r7, #6]
				printf("Température huile moteur: %d km/h\n", temperature_huile_moteur-40);
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	3b28      	subs	r3, #40	; 0x28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <main+0xc4>)
 8000c1c:	f002 fbc8 	bl	80033b0 <iprintf>
				break;
 8000c20:	e000      	b.n	8000c24 <main+0xb0>
			}
		}
	 }
 8000c22:	bf00      	nop
	if(CANSPI_Receive(&rxMessage))
 8000c24:	e7b5      	b.n	8000b92 <main+0x1e>
 8000c26:	bf00      	nop
 8000c28:	20000134 	.word	0x20000134
 8000c2c:	08004274 	.word	0x08004274
 8000c30:	08004284 	.word	0x08004284
 8000c34:	080042a0 	.word	0x080042a0
 8000c38:	080042b4 	.word	0x080042b4

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2234      	movs	r2, #52	; 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fba8 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <SystemClock_Config+0xb8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <SystemClock_Config+0xb8>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <SystemClock_Config+0xb8>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <SystemClock_Config+0xbc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <SystemClock_Config+0xbc>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <SystemClock_Config+0xbc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 ffe1 	bl	8001c78 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000cbc:	f000 f898 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fd56 	bl	800178c <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ce6:	f000 f883 	bl	8000df0 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3750      	adds	r7, #80	; 0x50
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007000 	.word	0x40007000

08000cfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <MX_SPI1_Init+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d30:	2210      	movs	r2, #16
 8000d32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d48:	220a      	movs	r2, #10
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_SPI1_Init+0x64>)
 8000d4e:	f001 fa31 	bl	80021b4 <HAL_SPI_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d58:	f000 f84a 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000098 	.word	0x20000098
 8000d64:	40013000 	.word	0x40013000

08000d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_USART2_UART_Init+0x50>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000da0:	f001 ffbe 	bl	8002d20 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000daa:	f000 f821 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000f0 	.word	0x200000f0
 8000db8:	40004400 	.word	0x40004400

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_GPIO_Init+0x30>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <MX_GPIO_Init+0x30>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_GPIO_Init+0x30>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_SPI_MspInit+0x84>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12b      	bne.n	8000ec6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ea6:	23e0      	movs	r3, #224	; 0xe0
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_SPI_MspInit+0x8c>)
 8000ec2:	f000 fab5 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x84>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12b      	bne.n	8000f56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f36:	230c      	movs	r3, #12
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f46:	2307      	movs	r3, #7
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_UART_MspInit+0x8c>)
 8000f52:	f000 fa6d 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f934 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
	}

return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd9b 	bl	8000b50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
	}
	return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	605a      	str	r2, [r3, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 f93e 	bl	800334c <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	2000008c 	.word	0x2000008c
 8001104:	20000160 	.word	0x20000160

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001156:	f7ff ffd7 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 f8fd 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fd09 	bl	8000b74 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001170:	08004398 	.word	0x08004398
  ldr r2, =_sbss
 8001174:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001178:	2000015c 	.word	0x2000015c

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f90d 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fe22 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f917 	bl	8001416 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 f8ed 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	20000148 	.word	0x20000148

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000148 	.word	0x20000148

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff47 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff5c 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffb0 	bl	8001384 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e165      	b.n	8001718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8154 	bne.w	8001712 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d005      	beq.n	8001482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	2b02      	cmp	r3, #2
 8001480:	d130      	bne.n	80014e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80ae 	beq.w	8001712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_GPIO_Init+0x300>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a5c      	ldr	r2, [pc, #368]	; (8001730 <HAL_GPIO_Init+0x300>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <HAL_GPIO_Init+0x300>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x304>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_GPIO_Init+0x308>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4e      	ldr	r2, [pc, #312]	; (800173c <HAL_GPIO_Init+0x30c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_GPIO_Init+0x310>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x212>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4c      	ldr	r2, [pc, #304]	; (8001744 <HAL_GPIO_Init+0x314>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_GPIO_Init+0x318>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x20a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4a      	ldr	r2, [pc, #296]	; (800174c <HAL_GPIO_Init+0x31c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x206>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_GPIO_Init+0x320>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x202>
 800162e:	2306      	movs	r3, #6
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001632:	2307      	movs	r3, #7
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	; (8001734 <HAL_GPIO_Init+0x304>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <HAL_GPIO_Init+0x324>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168e:	4a31      	ldr	r2, [pc, #196]	; (8001754 <HAL_GPIO_Init+0x324>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <HAL_GPIO_Init+0x324>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b8:	4a26      	ldr	r2, [pc, #152]	; (8001754 <HAL_GPIO_Init+0x324>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_GPIO_Init+0x324>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <HAL_GPIO_Init+0x324>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <HAL_GPIO_Init+0x324>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_GPIO_Init+0x324>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae96 	bls.w	800144c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0cc      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d90c      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d044      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d003      	beq.n	800184a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e067      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4934      	ldr	r1, [pc, #208]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff fce6 	bl	800124c <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff fce2 	bl	800124c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d20c      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f855 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fc46 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00
 8001948:	40023800 	.word	0x40023800
 800194c:	080042d8 	.word	0x080042d8
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_RCC_GetHCLKFreq+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff0 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	080042e8 	.word	0x080042e8

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffdc 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0b5b      	lsrs	r3, r3, #13
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	080042e8 	.word	0x080042e8

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019c8:	2600      	movs	r6, #0
 80019ca:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80019cc:	2600      	movs	r6, #0
 80019ce:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80019d0:	2600      	movs	r6, #0
 80019d2:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80019d4:	2600      	movs	r6, #0
 80019d6:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019d8:	2600      	movs	r6, #0
 80019da:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019dc:	4ea3      	ldr	r6, [pc, #652]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019de:	68b6      	ldr	r6, [r6, #8]
 80019e0:	f006 060c 	and.w	r6, r6, #12
 80019e4:	2e0c      	cmp	r6, #12
 80019e6:	f200 8137 	bhi.w	8001c58 <HAL_RCC_GetSysClockFreq+0x298>
 80019ea:	f20f 0c08 	addw	ip, pc, #8
 80019ee:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a29 	.word	0x08001a29
 80019f8:	08001c59 	.word	0x08001c59
 80019fc:	08001c59 	.word	0x08001c59
 8001a00:	08001c59 	.word	0x08001c59
 8001a04:	08001a2f 	.word	0x08001a2f
 8001a08:	08001c59 	.word	0x08001c59
 8001a0c:	08001c59 	.word	0x08001c59
 8001a10:	08001c59 	.word	0x08001c59
 8001a14:	08001a35 	.word	0x08001a35
 8001a18:	08001c59 	.word	0x08001c59
 8001a1c:	08001c59 	.word	0x08001c59
 8001a20:	08001c59 	.word	0x08001c59
 8001a24:	08001b4b 	.word	0x08001b4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001a2a:	613b      	str	r3, [r7, #16]
       break;
 8001a2c:	e117      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2e:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a30:	613b      	str	r3, [r7, #16]
      break;
 8001a32:	e114      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b8d      	ldr	r3, [pc, #564]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a3c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d024      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	461a      	mov	r2, r3
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a5a:	f04f 0500 	mov.w	r5, #0
 8001a5e:	ea02 0004 	and.w	r0, r2, r4
 8001a62:	ea03 0105 	and.w	r1, r3, r5
 8001a66:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a68:	fb03 f201 	mul.w	r2, r3, r1
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	fb03 f300 	mul.w	r3, r3, r0
 8001a72:	4413      	add	r3, r2
 8001a74:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001a76:	fba0 0102 	umull	r0, r1, r0, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	461a      	mov	r2, r3
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f7fe fc13 	bl	80002b0 <__aeabi_uldivmod>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4613      	mov	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e04c      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a94:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	ea02 0800 	and.w	r8, r2, r0
 8001aac:	ea03 0901 	and.w	r9, r3, r1
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	014b      	lsls	r3, r1, #5
 8001abe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ac2:	0142      	lsls	r2, r0, #5
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	ebb0 0008 	subs.w	r0, r0, r8
 8001acc:	eb61 0109 	sbc.w	r1, r1, r9
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	018b      	lsls	r3, r1, #6
 8001ada:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ade:	0182      	lsls	r2, r0, #6
 8001ae0:	1a12      	subs	r2, r2, r0
 8001ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	00d9      	lsls	r1, r3, #3
 8001af0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001af4:	00d0      	lsls	r0, r2, #3
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	eb12 0208 	adds.w	r2, r2, r8
 8001afe:	eb43 0309 	adc.w	r3, r3, r9
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0299      	lsls	r1, r3, #10
 8001b0c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b10:	0290      	lsls	r0, r2, #10
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f7fe fbc5 	bl	80002b0 <__aeabi_uldivmod>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b2e:	4b4f      	ldr	r3, [pc, #316]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	613b      	str	r3, [r7, #16]
      break;
 8001b48:	e089      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b4a:	4948      	ldr	r1, [pc, #288]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b4c:	6849      	ldr	r1, [r1, #4]
 8001b4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b52:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b54:	4945      	ldr	r1, [pc, #276]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b56:	6849      	ldr	r1, [r1, #4]
 8001b58:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	d024      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4942      	ldr	r1, [pc, #264]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b62:	6849      	ldr	r1, [r1, #4]
 8001b64:	0989      	lsrs	r1, r1, #6
 8001b66:	4608      	mov	r0, r1
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b70:	f04f 0500 	mov.w	r5, #0
 8001b74:	ea00 0204 	and.w	r2, r0, r4
 8001b78:	ea01 0305 	and.w	r3, r1, r5
 8001b7c:	493d      	ldr	r1, [pc, #244]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b7e:	fb01 f003 	mul.w	r0, r1, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	fb01 f102 	mul.w	r1, r1, r2
 8001b88:	1844      	adds	r4, r0, r1
 8001b8a:	493a      	ldr	r1, [pc, #232]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b8c:	fba2 0101 	umull	r0, r1, r2, r1
 8001b90:	1863      	adds	r3, r4, r1
 8001b92:	4619      	mov	r1, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	461a      	mov	r2, r3
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	f7fe fb88 	bl	80002b0 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e04a      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	ea02 0400 	and.w	r4, r2, r0
 8001bc2:	ea03 0501 	and.w	r5, r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	014b      	lsls	r3, r1, #5
 8001bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bd8:	0142      	lsls	r2, r0, #5
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	1b00      	subs	r0, r0, r4
 8001be0:	eb61 0105 	sbc.w	r1, r1, r5
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	018b      	lsls	r3, r1, #6
 8001bee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bf2:	0182      	lsls	r2, r0, #6
 8001bf4:	1a12      	subs	r2, r2, r0
 8001bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfa:	f04f 0000 	mov.w	r0, #0
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	00d9      	lsls	r1, r3, #3
 8001c04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c08:	00d0      	lsls	r0, r2, #3
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	1912      	adds	r2, r2, r4
 8001c10:	eb45 0303 	adc.w	r3, r5, r3
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0299      	lsls	r1, r3, #10
 8001c1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c22:	0290      	lsls	r0, r2, #10
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	f7fe fb3c 	bl	80002b0 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0f1b      	lsrs	r3, r3, #28
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	613b      	str	r3, [r7, #16]
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001c5a:	613b      	str	r3, [r7, #16]
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	693b      	ldr	r3, [r7, #16]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	017d7840 	.word	0x017d7840

08001c78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e28d      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8083 	beq.w	8001d9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d019      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cb0:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d112      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cca:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	4b84      	ldr	r3, [pc, #528]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d05b      	beq.n	8001d9c <HAL_RCC_OscConfig+0x124>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d157      	bne.n	8001d9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e25a      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x90>
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7b      	ldr	r2, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e01d      	b.n	8001d44 <HAL_RCC_OscConfig+0xcc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0xb4>
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a75      	ldr	r2, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a72      	ldr	r2, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0xcc>
 8001d2c:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6b      	ldr	r2, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fa7e 	bl	800124c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fa7a 	bl	800124c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e21f      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0xdc>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff fa6a 	bl	800124c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fa66 	bl	800124c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e20b      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x104>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06f      	beq.n	8001e8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001daa:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d017      	beq.n	8001de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001db6:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dce:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x186>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1d3      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4937      	ldr	r1, [pc, #220]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e03a      	b.n	8001e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_RCC_OscConfig+0x278>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa13 	bl	800124c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fa0f 	bl	800124c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1b4      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4925      	ldr	r1, [pc, #148]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_OscConfig+0x278>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f9f2 	bl	800124c <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff f9ee 	bl	800124c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e193      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d036      	beq.n	8001f04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d016      	beq.n	8001ecc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff f9d2 	bl	800124c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff f9ce 	bl	800124c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e173      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x234>
 8001eca:	e01b      	b.n	8001f04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9bb 	bl	800124c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	e00e      	b.n	8001ef8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff f9b7 	bl	800124c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d907      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e15c      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	42470000 	.word	0x42470000
 8001ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	4b8a      	ldr	r3, [pc, #552]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ea      	bne.n	8001eda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8097 	beq.w	8002040 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b83      	ldr	r3, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	4b7f      	ldr	r3, [pc, #508]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a7e      	ldr	r2, [pc, #504]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b79      	ldr	r3, [pc, #484]	; (8002128 <HAL_RCC_OscConfig+0x4b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_OscConfig+0x4b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a75      	ldr	r2, [pc, #468]	; (8002128 <HAL_RCC_OscConfig+0x4b0>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f977 	bl	800124c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff f973 	bl	800124c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e118      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCC_OscConfig+0x4b0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x31e>
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a65      	ldr	r2, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	e01c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x358>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x340>
 8001f9e:	4b61      	ldr	r3, [pc, #388]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	4a60      	ldr	r2, [pc, #384]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001faa:	4b5e      	ldr	r3, [pc, #376]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a5d      	ldr	r2, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x358>
 8001fb8:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a59      	ldr	r2, [pc, #356]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	f023 0304 	bic.w	r3, r3, #4
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d015      	beq.n	8002004 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f938 	bl	800124c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f934 	bl	800124c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e0d7      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0ee      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x368>
 8002002:	e014      	b.n	800202e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f922 	bl	800124c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7ff f91e 	bl	800124c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0c1      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1ee      	bne.n	800200c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80ad 	beq.w	80021a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b08      	cmp	r3, #8
 8002054:	d060      	beq.n	8002118 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d145      	bne.n	80020ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b33      	ldr	r3, [pc, #204]	; (800212c <HAL_RCC_OscConfig+0x4b4>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f8f2 	bl	800124c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f8ee 	bl	800124c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e093      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	019b      	lsls	r3, r3, #6
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	3b01      	subs	r3, #1
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	071b      	lsls	r3, r3, #28
 80020b6:	491b      	ldr	r1, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x4b4>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff f8c3 	bl	800124c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ca:	f7ff f8bf 	bl	800124c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e064      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x452>
 80020e8:	e05c      	b.n	80021a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_OscConfig+0x4b4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f8ac 	bl	800124c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff f8a8 	bl	800124c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04d      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x480>
 8002116:	e045      	b.n	80021a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e040      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
 8002124:	40023800 	.word	0x40023800
 8002128:	40007000 	.word	0x40007000
 800212c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_RCC_OscConfig+0x538>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d030      	beq.n	80021a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d129      	bne.n	80021a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d122      	bne.n	80021a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002168:	4293      	cmp	r3, r2
 800216a:	d119      	bne.n	80021a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d10f      	bne.n	80021a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07b      	b.n	80022be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d6:	d009      	beq.n	80021ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
 80021de:	e005      	b.n	80021ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fe20 	bl	8000e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	ea42 0103 	orr.w	r1, r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 0104 	and.w	r1, r3, #4
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f003 0210 	and.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b088      	sub	sp, #32
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_SPI_Transmit+0x22>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e126      	b.n	8002536 <HAL_SPI_Transmit+0x270>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f0:	f7fe ffac 	bl	800124c <HAL_GetTick>
 80022f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d002      	beq.n	800230c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800230a:	e10b      	b.n	8002524 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_SPI_Transmit+0x52>
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800231c:	e102      	b.n	8002524 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2203      	movs	r2, #3
 8002322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	d10f      	bne.n	8002386 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d007      	beq.n	80023a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ac:	d14b      	bne.n	8002446 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SPI_Transmit+0xf6>
 80023b6:	8afb      	ldrh	r3, [r7, #22]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d13e      	bne.n	800243a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	1c9a      	adds	r2, r3, #2
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023e0:	e02b      	b.n	800243a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d112      	bne.n	8002416 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	86da      	strh	r2, [r3, #54]	; 0x36
 8002414:	e011      	b.n	800243a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002416:	f7fe ff19 	bl	800124c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d803      	bhi.n	800242e <HAL_SPI_Transmit+0x168>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d102      	bne.n	8002434 <HAL_SPI_Transmit+0x16e>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002438:	e074      	b.n	8002524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ce      	bne.n	80023e2 <HAL_SPI_Transmit+0x11c>
 8002444:	e04c      	b.n	80024e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_SPI_Transmit+0x18e>
 800244e:	8afb      	ldrh	r3, [r7, #22]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d140      	bne.n	80024d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800247a:	e02c      	b.n	80024d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d113      	bne.n	80024b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	330c      	adds	r3, #12
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80024b0:	e011      	b.n	80024d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b2:	f7fe fecb 	bl	800124c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d803      	bhi.n	80024ca <HAL_SPI_Transmit+0x204>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d102      	bne.n	80024d0 <HAL_SPI_Transmit+0x20a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024d4:	e026      	b.n	8002524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1cd      	bne.n	800247c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	6839      	ldr	r1, [r7, #0]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fbd9 	bl	8002c9c <SPI_EndRxTxTransaction>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	e000      	b.n	8002524 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002522:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002534:	7ffb      	ldrb	r3, [r7, #31]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b088      	sub	sp, #32
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800255a:	d112      	bne.n	8002582 <HAL_SPI_Receive+0x44>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10e      	bne.n	8002582 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2204      	movs	r2, #4
 8002568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	4613      	mov	r3, r2
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f8f1 	bl	8002760 <HAL_SPI_TransmitReceive>
 800257e:	4603      	mov	r3, r0
 8002580:	e0ea      	b.n	8002758 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_SPI_Receive+0x52>
 800258c:	2302      	movs	r3, #2
 800258e:	e0e3      	b.n	8002758 <HAL_SPI_Receive+0x21a>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002598:	f7fe fe58 	bl	800124c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ae:	e0ca      	b.n	8002746 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_Receive+0x7e>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025c0:	e0c1      	b.n	8002746 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2204      	movs	r2, #4
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d10f      	bne.n	800262a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d007      	beq.n	8002648 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d162      	bne.n	8002716 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002650:	e02e      	b.n	80026b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d115      	bne.n	800268c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f103 020c 	add.w	r2, r3, #12
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800268a:	e011      	b.n	80026b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268c:	f7fe fdde 	bl	800124c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d803      	bhi.n	80026a4 <HAL_SPI_Receive+0x166>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d102      	bne.n	80026aa <HAL_SPI_Receive+0x16c>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026ae:	e04a      	b.n	8002746 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1cb      	bne.n	8002652 <HAL_SPI_Receive+0x114>
 80026ba:	e031      	b.n	8002720 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d113      	bne.n	80026f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	b292      	uxth	r2, r2
 80026d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	1c9a      	adds	r2, r3, #2
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026f0:	e011      	b.n	8002716 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f2:	f7fe fdab 	bl	800124c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d803      	bhi.n	800270a <HAL_SPI_Receive+0x1cc>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002708:	d102      	bne.n	8002710 <HAL_SPI_Receive+0x1d2>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002714:	e017      	b.n	8002746 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1cd      	bne.n	80026bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fa53 	bl	8002bd0 <SPI_EndRxTransaction>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	e000      	b.n	8002746 <HAL_SPI_Receive+0x208>
  }

error :
 8002744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800276e:	2301      	movs	r3, #1
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x26>
 8002782:	2302      	movs	r3, #2
 8002784:	e18a      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x33c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800278e:	f7fe fd5d 	bl	800124c <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800279a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d00f      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x70>
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027b6:	d107      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x68>
 80027c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d003      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
 80027ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027ce:	e15b      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x82>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x82>
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027e8:	e14e      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2205      	movs	r2, #5
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d007      	beq.n	8002852 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285a:	d178      	bne.n	800294e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_TransmitReceive+0x10a>
 8002864:	8b7b      	ldrh	r3, [r7, #26]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d166      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	1c9a      	adds	r2, r3, #2
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800288e:	e053      	b.n	8002938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d11b      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x176>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <HAL_SPI_TransmitReceive+0x176>
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d113      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	1c9a      	adds	r2, r3, #2
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d119      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x1b8>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d014      	beq.n	8002918 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	b292      	uxth	r2, r2
 80028fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002914:	2301      	movs	r3, #1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002918:	f7fe fc98 	bl	800124c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002924:	429a      	cmp	r2, r3
 8002926:	d807      	bhi.n	8002938 <HAL_SPI_TransmitReceive+0x1d8>
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d003      	beq.n	8002938 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002936:	e0a7      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1a6      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x130>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1a1      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x130>
 800294c:	e07c      	b.n	8002a48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_SPI_TransmitReceive+0x1fc>
 8002956:	8b7b      	ldrh	r3, [r7, #26]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d16b      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002982:	e057      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d11c      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x26c>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x26c>
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d114      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d119      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x2ae>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d014      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a0e:	f7fe fc1d 	bl	800124c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d803      	bhi.n	8002a26 <HAL_SPI_TransmitReceive+0x2c6>
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d102      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x2cc>
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a32:	e029      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1a2      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x224>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d19d      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f925 	bl	8002c9c <SPI_EndRxTxTransaction>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a64:	e010      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	e000      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab2:	b2db      	uxtb	r3, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ad0:	f7fe fbbc 	bl	800124c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ae0:	f7fe fbb4 	bl	800124c <HAL_GetTick>
 8002ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	0d1b      	lsrs	r3, r3, #20
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af6:	e054      	b.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d050      	beq.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b00:	f7fe fba4 	bl	800124c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d902      	bls.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d13d      	bne.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d111      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	d004      	beq.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d107      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d10f      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e017      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d19b      	bne.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be4:	d111      	bne.n	8002c0a <SPI_EndRxTransaction+0x3a>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bee:	d004      	beq.n	8002bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d107      	bne.n	8002c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c12:	d12a      	bne.n	8002c6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1c:	d012      	beq.n	8002c44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff ff49 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d02d      	beq.n	8002c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e026      	b.n	8002c92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff ff36 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01a      	beq.n	8002c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e013      	b.n	8002c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2101      	movs	r1, #1
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff ff23 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e000      	b.n	8002c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <SPI_EndRxTxTransaction+0x7c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <SPI_EndRxTxTransaction+0x80>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0d5b      	lsrs	r3, r3, #21
 8002cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc6:	d112      	bne.n	8002cee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fef4 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e00f      	b.n	8002d0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d0f2      	beq.n	8002cee <SPI_EndRxTxTransaction+0x52>
 8002d08:	e000      	b.n	8002d0c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d0a:	bf00      	nop
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	165e9f81 	.word	0x165e9f81

08002d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e03f      	b.n	8002db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f8c8 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f929 	bl	8002fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d17c      	bne.n	8002ed4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_Transmit+0x2c>
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e075      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x3e>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e06e      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2221      	movs	r2, #33	; 0x21
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe fa1d 	bl	800124c <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d108      	bne.n	8002e3c <HAL_UART_Transmit+0x82>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e003      	b.n	8002e44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e4c:	e02a      	b.n	8002ea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f840 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e036      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	3302      	adds	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e007      	b.n	8002e96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3301      	adds	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1cf      	bne.n	8002e4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f810 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e006      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b090      	sub	sp, #64	; 0x40
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eee:	e050      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d04c      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002efe:	f7fe f9a5 	bl	800124c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d241      	bcs.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f2e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e5      	bne.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	613b      	str	r3, [r7, #16]
   return(result);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3314      	adds	r3, #20
 8002f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f62:	623a      	str	r2, [r7, #32]
 8002f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	69f9      	ldr	r1, [r7, #28]
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e5      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e00f      	b.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d09f      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3740      	adds	r7, #64	; 0x40
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc0:	b09f      	sub	sp, #124	; 0x7c
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd2:	68d9      	ldr	r1, [r3, #12]
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	ea40 0301 	orr.w	r3, r0, r1
 8002fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003000:	f021 010c 	bic.w	r1, r1, #12
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800300a:	430b      	orrs	r3, r1
 800300c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	6999      	ldr	r1, [r3, #24]
 800301c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	ea40 0301 	orr.w	r3, r0, r1
 8003024:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4bc5      	ldr	r3, [pc, #788]	; (8003340 <UART_SetConfig+0x384>)
 800302c:	429a      	cmp	r2, r3
 800302e:	d004      	beq.n	800303a <UART_SetConfig+0x7e>
 8003030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4bc3      	ldr	r3, [pc, #780]	; (8003344 <UART_SetConfig+0x388>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d103      	bne.n	8003042 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800303a:	f7fe fcad 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 800303e:	6778      	str	r0, [r7, #116]	; 0x74
 8003040:	e002      	b.n	8003048 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7fe fc95 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8003046:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003050:	f040 80b6 	bne.w	80031c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003056:	461c      	mov	r4, r3
 8003058:	f04f 0500 	mov.w	r5, #0
 800305c:	4622      	mov	r2, r4
 800305e:	462b      	mov	r3, r5
 8003060:	1891      	adds	r1, r2, r2
 8003062:	6439      	str	r1, [r7, #64]	; 0x40
 8003064:	415b      	adcs	r3, r3
 8003066:	647b      	str	r3, [r7, #68]	; 0x44
 8003068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800306c:	1912      	adds	r2, r2, r4
 800306e:	eb45 0303 	adc.w	r3, r5, r3
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	00d9      	lsls	r1, r3, #3
 800307c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003080:	00d0      	lsls	r0, r2, #3
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	1911      	adds	r1, r2, r4
 8003088:	6639      	str	r1, [r7, #96]	; 0x60
 800308a:	416b      	adcs	r3, r5
 800308c:	667b      	str	r3, [r7, #100]	; 0x64
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	461a      	mov	r2, r3
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	1891      	adds	r1, r2, r2
 800309a:	63b9      	str	r1, [r7, #56]	; 0x38
 800309c:	415b      	adcs	r3, r3
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030a8:	f7fd f902 	bl	80002b0 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4ba5      	ldr	r3, [pc, #660]	; (8003348 <UART_SetConfig+0x38c>)
 80030b2:	fba3 2302 	umull	r2, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	011e      	lsls	r6, r3, #4
 80030ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030bc:	461c      	mov	r4, r3
 80030be:	f04f 0500 	mov.w	r5, #0
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	1891      	adds	r1, r2, r2
 80030c8:	6339      	str	r1, [r7, #48]	; 0x30
 80030ca:	415b      	adcs	r3, r3
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
 80030ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030d2:	1912      	adds	r2, r2, r4
 80030d4:	eb45 0303 	adc.w	r3, r5, r3
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	00d9      	lsls	r1, r3, #3
 80030e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e6:	00d0      	lsls	r0, r2, #3
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	1911      	adds	r1, r2, r4
 80030ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80030f0:	416b      	adcs	r3, r5
 80030f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	62b9      	str	r1, [r7, #40]	; 0x28
 8003102:	415b      	adcs	r3, r3
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800310a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800310e:	f7fd f8cf 	bl	80002b0 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <UART_SetConfig+0x38c>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	; 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	4a87      	ldr	r2, [pc, #540]	; (8003348 <UART_SetConfig+0x38c>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003138:	441e      	add	r6, r3
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	4618      	mov	r0, r3
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	1894      	adds	r4, r2, r2
 8003148:	623c      	str	r4, [r7, #32]
 800314a:	415b      	adcs	r3, r3
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003152:	1812      	adds	r2, r2, r0
 8003154:	eb41 0303 	adc.w	r3, r1, r3
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	f04f 0500 	mov.w	r5, #0
 8003160:	00dd      	lsls	r5, r3, #3
 8003162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003166:	00d4      	lsls	r4, r2, #3
 8003168:	4622      	mov	r2, r4
 800316a:	462b      	mov	r3, r5
 800316c:	1814      	adds	r4, r2, r0
 800316e:	653c      	str	r4, [r7, #80]	; 0x50
 8003170:	414b      	adcs	r3, r1
 8003172:	657b      	str	r3, [r7, #84]	; 0x54
 8003174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	461a      	mov	r2, r3
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	1891      	adds	r1, r2, r2
 8003180:	61b9      	str	r1, [r7, #24]
 8003182:	415b      	adcs	r3, r3
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800318e:	f7fd f88f 	bl	80002b0 <__aeabi_uldivmod>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <UART_SetConfig+0x38c>)
 8003198:	fba3 1302 	umull	r1, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	2164      	movs	r1, #100	; 0x64
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	3332      	adds	r3, #50	; 0x32
 80031aa:	4a67      	ldr	r2, [pc, #412]	; (8003348 <UART_SetConfig+0x38c>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	f003 0207 	and.w	r2, r3, #7
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4432      	add	r2, r6
 80031bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031be:	e0b9      	b.n	8003334 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c2:	461c      	mov	r4, r3
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	4622      	mov	r2, r4
 80031ca:	462b      	mov	r3, r5
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	6139      	str	r1, [r7, #16]
 80031d0:	415b      	adcs	r3, r3
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031d8:	1912      	adds	r2, r2, r4
 80031da:	eb45 0303 	adc.w	r3, r5, r3
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	00d9      	lsls	r1, r3, #3
 80031e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ec:	00d0      	lsls	r0, r2, #3
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	eb12 0804 	adds.w	r8, r2, r4
 80031f6:	eb43 0905 	adc.w	r9, r3, r5
 80031fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	008b      	lsls	r3, r1, #2
 800320e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003212:	0082      	lsls	r2, r0, #2
 8003214:	4640      	mov	r0, r8
 8003216:	4649      	mov	r1, r9
 8003218:	f7fd f84a 	bl	80002b0 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <UART_SetConfig+0x38c>)
 8003222:	fba3 2302 	umull	r2, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	011e      	lsls	r6, r3, #4
 800322a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322c:	4618      	mov	r0, r3
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	1894      	adds	r4, r2, r2
 8003238:	60bc      	str	r4, [r7, #8]
 800323a:	415b      	adcs	r3, r3
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003242:	1812      	adds	r2, r2, r0
 8003244:	eb41 0303 	adc.w	r3, r1, r3
 8003248:	f04f 0400 	mov.w	r4, #0
 800324c:	f04f 0500 	mov.w	r5, #0
 8003250:	00dd      	lsls	r5, r3, #3
 8003252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003256:	00d4      	lsls	r4, r2, #3
 8003258:	4622      	mov	r2, r4
 800325a:	462b      	mov	r3, r5
 800325c:	1814      	adds	r4, r2, r0
 800325e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003260:	414b      	adcs	r3, r1
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	008b      	lsls	r3, r1, #2
 8003278:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800327c:	0082      	lsls	r2, r0, #2
 800327e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003282:	f7fd f815 	bl	80002b0 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <UART_SetConfig+0x38c>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	; 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	3332      	adds	r3, #50	; 0x32
 800329e:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <UART_SetConfig+0x38c>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032aa:	441e      	add	r6, r3
 80032ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ae:	4618      	mov	r0, r3
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	1894      	adds	r4, r2, r2
 80032ba:	603c      	str	r4, [r7, #0]
 80032bc:	415b      	adcs	r3, r3
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c4:	1812      	adds	r2, r2, r0
 80032c6:	eb41 0303 	adc.w	r3, r1, r3
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	f04f 0500 	mov.w	r5, #0
 80032d2:	00dd      	lsls	r5, r3, #3
 80032d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032d8:	00d4      	lsls	r4, r2, #3
 80032da:	4622      	mov	r2, r4
 80032dc:	462b      	mov	r3, r5
 80032de:	eb12 0a00 	adds.w	sl, r2, r0
 80032e2:	eb43 0b01 	adc.w	fp, r3, r1
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	008b      	lsls	r3, r1, #2
 80032fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032fe:	0082      	lsls	r2, r0, #2
 8003300:	4650      	mov	r0, sl
 8003302:	4659      	mov	r1, fp
 8003304:	f7fc ffd4 	bl	80002b0 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <UART_SetConfig+0x38c>)
 800330e:	fba3 1302 	umull	r1, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2164      	movs	r1, #100	; 0x64
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	; 0x32
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <UART_SetConfig+0x38c>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4432      	add	r2, r6
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	377c      	adds	r7, #124	; 0x7c
 8003338:	46bd      	mov	sp, r7
 800333a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800333e:	bf00      	nop
 8003340:	40011000 	.word	0x40011000
 8003344:	40011400 	.word	0x40011400
 8003348:	51eb851f 	.word	0x51eb851f

0800334c <__errno>:
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <__errno+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4d0d      	ldr	r5, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2600      	movs	r6, #0
 8003364:	42a6      	cmp	r6, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4d0b      	ldr	r5, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 ff76 	bl	800425c <_init>
 8003370:	1b64      	subs	r4, r4, r5
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2600      	movs	r6, #0
 8003376:	42a6      	cmp	r6, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003380:	4798      	blx	r3
 8003382:	3601      	adds	r6, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f855 3b04 	ldr.w	r3, [r5], #4
 800338a:	4798      	blx	r3
 800338c:	3601      	adds	r6, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	08004390 	.word	0x08004390
 8003394:	08004390 	.word	0x08004390
 8003398:	08004390 	.word	0x08004390
 800339c:	08004394 	.word	0x08004394

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <iprintf>:
 80033b0:	b40f      	push	{r0, r1, r2, r3}
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <iprintf+0x2c>)
 80033b4:	b513      	push	{r0, r1, r4, lr}
 80033b6:	681c      	ldr	r4, [r3, #0]
 80033b8:	b124      	cbz	r4, 80033c4 <iprintf+0x14>
 80033ba:	69a3      	ldr	r3, [r4, #24]
 80033bc:	b913      	cbnz	r3, 80033c4 <iprintf+0x14>
 80033be:	4620      	mov	r0, r4
 80033c0:	f000 f866 	bl	8003490 <__sinit>
 80033c4:	ab05      	add	r3, sp, #20
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	68a1      	ldr	r1, [r4, #8]
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	4620      	mov	r0, r4
 80033ce:	f000 f983 	bl	80036d8 <_vfiprintf_r>
 80033d2:	b002      	add	sp, #8
 80033d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d8:	b004      	add	sp, #16
 80033da:	4770      	bx	lr
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <std>:
 80033e0:	2300      	movs	r3, #0
 80033e2:	b510      	push	{r4, lr}
 80033e4:	4604      	mov	r4, r0
 80033e6:	e9c0 3300 	strd	r3, r3, [r0]
 80033ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ee:	6083      	str	r3, [r0, #8]
 80033f0:	8181      	strh	r1, [r0, #12]
 80033f2:	6643      	str	r3, [r0, #100]	; 0x64
 80033f4:	81c2      	strh	r2, [r0, #14]
 80033f6:	6183      	str	r3, [r0, #24]
 80033f8:	4619      	mov	r1, r3
 80033fa:	2208      	movs	r2, #8
 80033fc:	305c      	adds	r0, #92	; 0x5c
 80033fe:	f7ff ffcf 	bl	80033a0 <memset>
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <std+0x38>)
 8003404:	6263      	str	r3, [r4, #36]	; 0x24
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <std+0x3c>)
 8003408:	62a3      	str	r3, [r4, #40]	; 0x28
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <std+0x40>)
 800340c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <std+0x44>)
 8003410:	6224      	str	r4, [r4, #32]
 8003412:	6323      	str	r3, [r4, #48]	; 0x30
 8003414:	bd10      	pop	{r4, pc}
 8003416:	bf00      	nop
 8003418:	08003c81 	.word	0x08003c81
 800341c:	08003ca3 	.word	0x08003ca3
 8003420:	08003cdb 	.word	0x08003cdb
 8003424:	08003cff 	.word	0x08003cff

08003428 <_cleanup_r>:
 8003428:	4901      	ldr	r1, [pc, #4]	; (8003430 <_cleanup_r+0x8>)
 800342a:	f000 b8af 	b.w	800358c <_fwalk_reent>
 800342e:	bf00      	nop
 8003430:	08003fd9 	.word	0x08003fd9

08003434 <__sfmoreglue>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	1e4a      	subs	r2, r1, #1
 8003438:	2568      	movs	r5, #104	; 0x68
 800343a:	4355      	muls	r5, r2
 800343c:	460e      	mov	r6, r1
 800343e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003442:	f000 f8c5 	bl	80035d0 <_malloc_r>
 8003446:	4604      	mov	r4, r0
 8003448:	b140      	cbz	r0, 800345c <__sfmoreglue+0x28>
 800344a:	2100      	movs	r1, #0
 800344c:	e9c0 1600 	strd	r1, r6, [r0]
 8003450:	300c      	adds	r0, #12
 8003452:	60a0      	str	r0, [r4, #8]
 8003454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003458:	f7ff ffa2 	bl	80033a0 <memset>
 800345c:	4620      	mov	r0, r4
 800345e:	bd70      	pop	{r4, r5, r6, pc}

08003460 <__sfp_lock_acquire>:
 8003460:	4801      	ldr	r0, [pc, #4]	; (8003468 <__sfp_lock_acquire+0x8>)
 8003462:	f000 b8b3 	b.w	80035cc <__retarget_lock_acquire_recursive>
 8003466:	bf00      	nop
 8003468:	20000154 	.word	0x20000154

0800346c <__sfp_lock_release>:
 800346c:	4801      	ldr	r0, [pc, #4]	; (8003474 <__sfp_lock_release+0x8>)
 800346e:	f000 b8ae 	b.w	80035ce <__retarget_lock_release_recursive>
 8003472:	bf00      	nop
 8003474:	20000154 	.word	0x20000154

08003478 <__sinit_lock_acquire>:
 8003478:	4801      	ldr	r0, [pc, #4]	; (8003480 <__sinit_lock_acquire+0x8>)
 800347a:	f000 b8a7 	b.w	80035cc <__retarget_lock_acquire_recursive>
 800347e:	bf00      	nop
 8003480:	2000014f 	.word	0x2000014f

08003484 <__sinit_lock_release>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__sinit_lock_release+0x8>)
 8003486:	f000 b8a2 	b.w	80035ce <__retarget_lock_release_recursive>
 800348a:	bf00      	nop
 800348c:	2000014f 	.word	0x2000014f

08003490 <__sinit>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4604      	mov	r4, r0
 8003494:	f7ff fff0 	bl	8003478 <__sinit_lock_acquire>
 8003498:	69a3      	ldr	r3, [r4, #24]
 800349a:	b11b      	cbz	r3, 80034a4 <__sinit+0x14>
 800349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a0:	f7ff bff0 	b.w	8003484 <__sinit_lock_release>
 80034a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034a8:	6523      	str	r3, [r4, #80]	; 0x50
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <__sinit+0x68>)
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <__sinit+0x6c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	bf04      	itt	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	61a3      	streq	r3, [r4, #24]
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 f820 	bl	8003500 <__sfp>
 80034c0:	6060      	str	r0, [r4, #4]
 80034c2:	4620      	mov	r0, r4
 80034c4:	f000 f81c 	bl	8003500 <__sfp>
 80034c8:	60a0      	str	r0, [r4, #8]
 80034ca:	4620      	mov	r0, r4
 80034cc:	f000 f818 	bl	8003500 <__sfp>
 80034d0:	2200      	movs	r2, #0
 80034d2:	60e0      	str	r0, [r4, #12]
 80034d4:	2104      	movs	r1, #4
 80034d6:	6860      	ldr	r0, [r4, #4]
 80034d8:	f7ff ff82 	bl	80033e0 <std>
 80034dc:	68a0      	ldr	r0, [r4, #8]
 80034de:	2201      	movs	r2, #1
 80034e0:	2109      	movs	r1, #9
 80034e2:	f7ff ff7d 	bl	80033e0 <std>
 80034e6:	68e0      	ldr	r0, [r4, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	2112      	movs	r1, #18
 80034ec:	f7ff ff78 	bl	80033e0 <std>
 80034f0:	2301      	movs	r3, #1
 80034f2:	61a3      	str	r3, [r4, #24]
 80034f4:	e7d2      	b.n	800349c <__sinit+0xc>
 80034f6:	bf00      	nop
 80034f8:	080042f0 	.word	0x080042f0
 80034fc:	08003429 	.word	0x08003429

08003500 <__sfp>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	4607      	mov	r7, r0
 8003504:	f7ff ffac 	bl	8003460 <__sfp_lock_acquire>
 8003508:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <__sfp+0x84>)
 800350a:	681e      	ldr	r6, [r3, #0]
 800350c:	69b3      	ldr	r3, [r6, #24]
 800350e:	b913      	cbnz	r3, 8003516 <__sfp+0x16>
 8003510:	4630      	mov	r0, r6
 8003512:	f7ff ffbd 	bl	8003490 <__sinit>
 8003516:	3648      	adds	r6, #72	; 0x48
 8003518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800351c:	3b01      	subs	r3, #1
 800351e:	d503      	bpl.n	8003528 <__sfp+0x28>
 8003520:	6833      	ldr	r3, [r6, #0]
 8003522:	b30b      	cbz	r3, 8003568 <__sfp+0x68>
 8003524:	6836      	ldr	r6, [r6, #0]
 8003526:	e7f7      	b.n	8003518 <__sfp+0x18>
 8003528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800352c:	b9d5      	cbnz	r5, 8003564 <__sfp+0x64>
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <__sfp+0x88>)
 8003530:	60e3      	str	r3, [r4, #12]
 8003532:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003536:	6665      	str	r5, [r4, #100]	; 0x64
 8003538:	f000 f847 	bl	80035ca <__retarget_lock_init_recursive>
 800353c:	f7ff ff96 	bl	800346c <__sfp_lock_release>
 8003540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003548:	6025      	str	r5, [r4, #0]
 800354a:	61a5      	str	r5, [r4, #24]
 800354c:	2208      	movs	r2, #8
 800354e:	4629      	mov	r1, r5
 8003550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003554:	f7ff ff24 	bl	80033a0 <memset>
 8003558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800355c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003560:	4620      	mov	r0, r4
 8003562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003564:	3468      	adds	r4, #104	; 0x68
 8003566:	e7d9      	b.n	800351c <__sfp+0x1c>
 8003568:	2104      	movs	r1, #4
 800356a:	4638      	mov	r0, r7
 800356c:	f7ff ff62 	bl	8003434 <__sfmoreglue>
 8003570:	4604      	mov	r4, r0
 8003572:	6030      	str	r0, [r6, #0]
 8003574:	2800      	cmp	r0, #0
 8003576:	d1d5      	bne.n	8003524 <__sfp+0x24>
 8003578:	f7ff ff78 	bl	800346c <__sfp_lock_release>
 800357c:	230c      	movs	r3, #12
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	e7ee      	b.n	8003560 <__sfp+0x60>
 8003582:	bf00      	nop
 8003584:	080042f0 	.word	0x080042f0
 8003588:	ffff0001 	.word	0xffff0001

0800358c <_fwalk_reent>:
 800358c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003590:	4606      	mov	r6, r0
 8003592:	4688      	mov	r8, r1
 8003594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003598:	2700      	movs	r7, #0
 800359a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800359e:	f1b9 0901 	subs.w	r9, r9, #1
 80035a2:	d505      	bpl.n	80035b0 <_fwalk_reent+0x24>
 80035a4:	6824      	ldr	r4, [r4, #0]
 80035a6:	2c00      	cmp	r4, #0
 80035a8:	d1f7      	bne.n	800359a <_fwalk_reent+0xe>
 80035aa:	4638      	mov	r0, r7
 80035ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035b0:	89ab      	ldrh	r3, [r5, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d907      	bls.n	80035c6 <_fwalk_reent+0x3a>
 80035b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035ba:	3301      	adds	r3, #1
 80035bc:	d003      	beq.n	80035c6 <_fwalk_reent+0x3a>
 80035be:	4629      	mov	r1, r5
 80035c0:	4630      	mov	r0, r6
 80035c2:	47c0      	blx	r8
 80035c4:	4307      	orrs	r7, r0
 80035c6:	3568      	adds	r5, #104	; 0x68
 80035c8:	e7e9      	b.n	800359e <_fwalk_reent+0x12>

080035ca <__retarget_lock_init_recursive>:
 80035ca:	4770      	bx	lr

080035cc <__retarget_lock_acquire_recursive>:
 80035cc:	4770      	bx	lr

080035ce <__retarget_lock_release_recursive>:
 80035ce:	4770      	bx	lr

080035d0 <_malloc_r>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	1ccd      	adds	r5, r1, #3
 80035d4:	f025 0503 	bic.w	r5, r5, #3
 80035d8:	3508      	adds	r5, #8
 80035da:	2d0c      	cmp	r5, #12
 80035dc:	bf38      	it	cc
 80035de:	250c      	movcc	r5, #12
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	4606      	mov	r6, r0
 80035e4:	db01      	blt.n	80035ea <_malloc_r+0x1a>
 80035e6:	42a9      	cmp	r1, r5
 80035e8:	d903      	bls.n	80035f2 <_malloc_r+0x22>
 80035ea:	230c      	movs	r3, #12
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	2000      	movs	r0, #0
 80035f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f2:	f000 fda3 	bl	800413c <__malloc_lock>
 80035f6:	4921      	ldr	r1, [pc, #132]	; (800367c <_malloc_r+0xac>)
 80035f8:	680a      	ldr	r2, [r1, #0]
 80035fa:	4614      	mov	r4, r2
 80035fc:	b99c      	cbnz	r4, 8003626 <_malloc_r+0x56>
 80035fe:	4f20      	ldr	r7, [pc, #128]	; (8003680 <_malloc_r+0xb0>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b923      	cbnz	r3, 800360e <_malloc_r+0x3e>
 8003604:	4621      	mov	r1, r4
 8003606:	4630      	mov	r0, r6
 8003608:	f000 fb2a 	bl	8003c60 <_sbrk_r>
 800360c:	6038      	str	r0, [r7, #0]
 800360e:	4629      	mov	r1, r5
 8003610:	4630      	mov	r0, r6
 8003612:	f000 fb25 	bl	8003c60 <_sbrk_r>
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	d123      	bne.n	8003662 <_malloc_r+0x92>
 800361a:	230c      	movs	r3, #12
 800361c:	6033      	str	r3, [r6, #0]
 800361e:	4630      	mov	r0, r6
 8003620:	f000 fd92 	bl	8004148 <__malloc_unlock>
 8003624:	e7e3      	b.n	80035ee <_malloc_r+0x1e>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	1b5b      	subs	r3, r3, r5
 800362a:	d417      	bmi.n	800365c <_malloc_r+0x8c>
 800362c:	2b0b      	cmp	r3, #11
 800362e:	d903      	bls.n	8003638 <_malloc_r+0x68>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	441c      	add	r4, r3
 8003634:	6025      	str	r5, [r4, #0]
 8003636:	e004      	b.n	8003642 <_malloc_r+0x72>
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	42a2      	cmp	r2, r4
 800363c:	bf0c      	ite	eq
 800363e:	600b      	streq	r3, [r1, #0]
 8003640:	6053      	strne	r3, [r2, #4]
 8003642:	4630      	mov	r0, r6
 8003644:	f000 fd80 	bl	8004148 <__malloc_unlock>
 8003648:	f104 000b 	add.w	r0, r4, #11
 800364c:	1d23      	adds	r3, r4, #4
 800364e:	f020 0007 	bic.w	r0, r0, #7
 8003652:	1ac2      	subs	r2, r0, r3
 8003654:	d0cc      	beq.n	80035f0 <_malloc_r+0x20>
 8003656:	1a1b      	subs	r3, r3, r0
 8003658:	50a3      	str	r3, [r4, r2]
 800365a:	e7c9      	b.n	80035f0 <_malloc_r+0x20>
 800365c:	4622      	mov	r2, r4
 800365e:	6864      	ldr	r4, [r4, #4]
 8003660:	e7cc      	b.n	80035fc <_malloc_r+0x2c>
 8003662:	1cc4      	adds	r4, r0, #3
 8003664:	f024 0403 	bic.w	r4, r4, #3
 8003668:	42a0      	cmp	r0, r4
 800366a:	d0e3      	beq.n	8003634 <_malloc_r+0x64>
 800366c:	1a21      	subs	r1, r4, r0
 800366e:	4630      	mov	r0, r6
 8003670:	f000 faf6 	bl	8003c60 <_sbrk_r>
 8003674:	3001      	adds	r0, #1
 8003676:	d1dd      	bne.n	8003634 <_malloc_r+0x64>
 8003678:	e7cf      	b.n	800361a <_malloc_r+0x4a>
 800367a:	bf00      	nop
 800367c:	20000090 	.word	0x20000090
 8003680:	20000094 	.word	0x20000094

08003684 <__sfputc_r>:
 8003684:	6893      	ldr	r3, [r2, #8]
 8003686:	3b01      	subs	r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	b410      	push	{r4}
 800368c:	6093      	str	r3, [r2, #8]
 800368e:	da08      	bge.n	80036a2 <__sfputc_r+0x1e>
 8003690:	6994      	ldr	r4, [r2, #24]
 8003692:	42a3      	cmp	r3, r4
 8003694:	db01      	blt.n	800369a <__sfputc_r+0x16>
 8003696:	290a      	cmp	r1, #10
 8003698:	d103      	bne.n	80036a2 <__sfputc_r+0x1e>
 800369a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800369e:	f000 bb33 	b.w	8003d08 <__swbuf_r>
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	1c58      	adds	r0, r3, #1
 80036a6:	6010      	str	r0, [r2, #0]
 80036a8:	7019      	strb	r1, [r3, #0]
 80036aa:	4608      	mov	r0, r1
 80036ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <__sfputs_r>:
 80036b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b4:	4606      	mov	r6, r0
 80036b6:	460f      	mov	r7, r1
 80036b8:	4614      	mov	r4, r2
 80036ba:	18d5      	adds	r5, r2, r3
 80036bc:	42ac      	cmp	r4, r5
 80036be:	d101      	bne.n	80036c4 <__sfputs_r+0x12>
 80036c0:	2000      	movs	r0, #0
 80036c2:	e007      	b.n	80036d4 <__sfputs_r+0x22>
 80036c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c8:	463a      	mov	r2, r7
 80036ca:	4630      	mov	r0, r6
 80036cc:	f7ff ffda 	bl	8003684 <__sfputc_r>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d1f3      	bne.n	80036bc <__sfputs_r+0xa>
 80036d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036d8 <_vfiprintf_r>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	460d      	mov	r5, r1
 80036de:	b09d      	sub	sp, #116	; 0x74
 80036e0:	4614      	mov	r4, r2
 80036e2:	4698      	mov	r8, r3
 80036e4:	4606      	mov	r6, r0
 80036e6:	b118      	cbz	r0, 80036f0 <_vfiprintf_r+0x18>
 80036e8:	6983      	ldr	r3, [r0, #24]
 80036ea:	b90b      	cbnz	r3, 80036f0 <_vfiprintf_r+0x18>
 80036ec:	f7ff fed0 	bl	8003490 <__sinit>
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <_vfiprintf_r+0x240>)
 80036f2:	429d      	cmp	r5, r3
 80036f4:	d11b      	bne.n	800372e <_vfiprintf_r+0x56>
 80036f6:	6875      	ldr	r5, [r6, #4]
 80036f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036fa:	07d9      	lsls	r1, r3, #31
 80036fc:	d405      	bmi.n	800370a <_vfiprintf_r+0x32>
 80036fe:	89ab      	ldrh	r3, [r5, #12]
 8003700:	059a      	lsls	r2, r3, #22
 8003702:	d402      	bmi.n	800370a <_vfiprintf_r+0x32>
 8003704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003706:	f7ff ff61 	bl	80035cc <__retarget_lock_acquire_recursive>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	071b      	lsls	r3, r3, #28
 800370e:	d501      	bpl.n	8003714 <_vfiprintf_r+0x3c>
 8003710:	692b      	ldr	r3, [r5, #16]
 8003712:	b9eb      	cbnz	r3, 8003750 <_vfiprintf_r+0x78>
 8003714:	4629      	mov	r1, r5
 8003716:	4630      	mov	r0, r6
 8003718:	f000 fb5a 	bl	8003dd0 <__swsetup_r>
 800371c:	b1c0      	cbz	r0, 8003750 <_vfiprintf_r+0x78>
 800371e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003720:	07dc      	lsls	r4, r3, #31
 8003722:	d50e      	bpl.n	8003742 <_vfiprintf_r+0x6a>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	b01d      	add	sp, #116	; 0x74
 800372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800372e:	4b7b      	ldr	r3, [pc, #492]	; (800391c <_vfiprintf_r+0x244>)
 8003730:	429d      	cmp	r5, r3
 8003732:	d101      	bne.n	8003738 <_vfiprintf_r+0x60>
 8003734:	68b5      	ldr	r5, [r6, #8]
 8003736:	e7df      	b.n	80036f8 <_vfiprintf_r+0x20>
 8003738:	4b79      	ldr	r3, [pc, #484]	; (8003920 <_vfiprintf_r+0x248>)
 800373a:	429d      	cmp	r5, r3
 800373c:	bf08      	it	eq
 800373e:	68f5      	ldreq	r5, [r6, #12]
 8003740:	e7da      	b.n	80036f8 <_vfiprintf_r+0x20>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	0598      	lsls	r0, r3, #22
 8003746:	d4ed      	bmi.n	8003724 <_vfiprintf_r+0x4c>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7ff ff40 	bl	80035ce <__retarget_lock_release_recursive>
 800374e:	e7e9      	b.n	8003724 <_vfiprintf_r+0x4c>
 8003750:	2300      	movs	r3, #0
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	2320      	movs	r3, #32
 8003756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800375a:	f8cd 800c 	str.w	r8, [sp, #12]
 800375e:	2330      	movs	r3, #48	; 0x30
 8003760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003924 <_vfiprintf_r+0x24c>
 8003764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003768:	f04f 0901 	mov.w	r9, #1
 800376c:	4623      	mov	r3, r4
 800376e:	469a      	mov	sl, r3
 8003770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003774:	b10a      	cbz	r2, 800377a <_vfiprintf_r+0xa2>
 8003776:	2a25      	cmp	r2, #37	; 0x25
 8003778:	d1f9      	bne.n	800376e <_vfiprintf_r+0x96>
 800377a:	ebba 0b04 	subs.w	fp, sl, r4
 800377e:	d00b      	beq.n	8003798 <_vfiprintf_r+0xc0>
 8003780:	465b      	mov	r3, fp
 8003782:	4622      	mov	r2, r4
 8003784:	4629      	mov	r1, r5
 8003786:	4630      	mov	r0, r6
 8003788:	f7ff ff93 	bl	80036b2 <__sfputs_r>
 800378c:	3001      	adds	r0, #1
 800378e:	f000 80aa 	beq.w	80038e6 <_vfiprintf_r+0x20e>
 8003792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003794:	445a      	add	r2, fp
 8003796:	9209      	str	r2, [sp, #36]	; 0x24
 8003798:	f89a 3000 	ldrb.w	r3, [sl]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a2 	beq.w	80038e6 <_vfiprintf_r+0x20e>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ac:	f10a 0a01 	add.w	sl, sl, #1
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	9307      	str	r3, [sp, #28]
 80037b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037b8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ba:	4654      	mov	r4, sl
 80037bc:	2205      	movs	r2, #5
 80037be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c2:	4858      	ldr	r0, [pc, #352]	; (8003924 <_vfiprintf_r+0x24c>)
 80037c4:	f7fc fd24 	bl	8000210 <memchr>
 80037c8:	9a04      	ldr	r2, [sp, #16]
 80037ca:	b9d8      	cbnz	r0, 8003804 <_vfiprintf_r+0x12c>
 80037cc:	06d1      	lsls	r1, r2, #27
 80037ce:	bf44      	itt	mi
 80037d0:	2320      	movmi	r3, #32
 80037d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d6:	0713      	lsls	r3, r2, #28
 80037d8:	bf44      	itt	mi
 80037da:	232b      	movmi	r3, #43	; 0x2b
 80037dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037e0:	f89a 3000 	ldrb.w	r3, [sl]
 80037e4:	2b2a      	cmp	r3, #42	; 0x2a
 80037e6:	d015      	beq.n	8003814 <_vfiprintf_r+0x13c>
 80037e8:	9a07      	ldr	r2, [sp, #28]
 80037ea:	4654      	mov	r4, sl
 80037ec:	2000      	movs	r0, #0
 80037ee:	f04f 0c0a 	mov.w	ip, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037f8:	3b30      	subs	r3, #48	; 0x30
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d94e      	bls.n	800389c <_vfiprintf_r+0x1c4>
 80037fe:	b1b0      	cbz	r0, 800382e <_vfiprintf_r+0x156>
 8003800:	9207      	str	r2, [sp, #28]
 8003802:	e014      	b.n	800382e <_vfiprintf_r+0x156>
 8003804:	eba0 0308 	sub.w	r3, r0, r8
 8003808:	fa09 f303 	lsl.w	r3, r9, r3
 800380c:	4313      	orrs	r3, r2
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	46a2      	mov	sl, r4
 8003812:	e7d2      	b.n	80037ba <_vfiprintf_r+0xe2>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	1d19      	adds	r1, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9103      	str	r1, [sp, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	bfbb      	ittet	lt
 8003820:	425b      	neglt	r3, r3
 8003822:	f042 0202 	orrlt.w	r2, r2, #2
 8003826:	9307      	strge	r3, [sp, #28]
 8003828:	9307      	strlt	r3, [sp, #28]
 800382a:	bfb8      	it	lt
 800382c:	9204      	strlt	r2, [sp, #16]
 800382e:	7823      	ldrb	r3, [r4, #0]
 8003830:	2b2e      	cmp	r3, #46	; 0x2e
 8003832:	d10c      	bne.n	800384e <_vfiprintf_r+0x176>
 8003834:	7863      	ldrb	r3, [r4, #1]
 8003836:	2b2a      	cmp	r3, #42	; 0x2a
 8003838:	d135      	bne.n	80038a6 <_vfiprintf_r+0x1ce>
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	9203      	str	r2, [sp, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfb8      	it	lt
 8003846:	f04f 33ff 	movlt.w	r3, #4294967295
 800384a:	3402      	adds	r4, #2
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003934 <_vfiprintf_r+0x25c>
 8003852:	7821      	ldrb	r1, [r4, #0]
 8003854:	2203      	movs	r2, #3
 8003856:	4650      	mov	r0, sl
 8003858:	f7fc fcda 	bl	8000210 <memchr>
 800385c:	b140      	cbz	r0, 8003870 <_vfiprintf_r+0x198>
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	eba0 000a 	sub.w	r0, r0, sl
 8003864:	fa03 f000 	lsl.w	r0, r3, r0
 8003868:	9b04      	ldr	r3, [sp, #16]
 800386a:	4303      	orrs	r3, r0
 800386c:	3401      	adds	r4, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003874:	482c      	ldr	r0, [pc, #176]	; (8003928 <_vfiprintf_r+0x250>)
 8003876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800387a:	2206      	movs	r2, #6
 800387c:	f7fc fcc8 	bl	8000210 <memchr>
 8003880:	2800      	cmp	r0, #0
 8003882:	d03f      	beq.n	8003904 <_vfiprintf_r+0x22c>
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <_vfiprintf_r+0x254>)
 8003886:	bb1b      	cbnz	r3, 80038d0 <_vfiprintf_r+0x1f8>
 8003888:	9b03      	ldr	r3, [sp, #12]
 800388a:	3307      	adds	r3, #7
 800388c:	f023 0307 	bic.w	r3, r3, #7
 8003890:	3308      	adds	r3, #8
 8003892:	9303      	str	r3, [sp, #12]
 8003894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003896:	443b      	add	r3, r7
 8003898:	9309      	str	r3, [sp, #36]	; 0x24
 800389a:	e767      	b.n	800376c <_vfiprintf_r+0x94>
 800389c:	fb0c 3202 	mla	r2, ip, r2, r3
 80038a0:	460c      	mov	r4, r1
 80038a2:	2001      	movs	r0, #1
 80038a4:	e7a5      	b.n	80037f2 <_vfiprintf_r+0x11a>
 80038a6:	2300      	movs	r3, #0
 80038a8:	3401      	adds	r4, #1
 80038aa:	9305      	str	r3, [sp, #20]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f04f 0c0a 	mov.w	ip, #10
 80038b2:	4620      	mov	r0, r4
 80038b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038b8:	3a30      	subs	r2, #48	; 0x30
 80038ba:	2a09      	cmp	r2, #9
 80038bc:	d903      	bls.n	80038c6 <_vfiprintf_r+0x1ee>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0c5      	beq.n	800384e <_vfiprintf_r+0x176>
 80038c2:	9105      	str	r1, [sp, #20]
 80038c4:	e7c3      	b.n	800384e <_vfiprintf_r+0x176>
 80038c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ca:	4604      	mov	r4, r0
 80038cc:	2301      	movs	r3, #1
 80038ce:	e7f0      	b.n	80038b2 <_vfiprintf_r+0x1da>
 80038d0:	ab03      	add	r3, sp, #12
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	462a      	mov	r2, r5
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <_vfiprintf_r+0x258>)
 80038d8:	a904      	add	r1, sp, #16
 80038da:	4630      	mov	r0, r6
 80038dc:	f3af 8000 	nop.w
 80038e0:	4607      	mov	r7, r0
 80038e2:	1c78      	adds	r0, r7, #1
 80038e4:	d1d6      	bne.n	8003894 <_vfiprintf_r+0x1bc>
 80038e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e8:	07d9      	lsls	r1, r3, #31
 80038ea:	d405      	bmi.n	80038f8 <_vfiprintf_r+0x220>
 80038ec:	89ab      	ldrh	r3, [r5, #12]
 80038ee:	059a      	lsls	r2, r3, #22
 80038f0:	d402      	bmi.n	80038f8 <_vfiprintf_r+0x220>
 80038f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f4:	f7ff fe6b 	bl	80035ce <__retarget_lock_release_recursive>
 80038f8:	89ab      	ldrh	r3, [r5, #12]
 80038fa:	065b      	lsls	r3, r3, #25
 80038fc:	f53f af12 	bmi.w	8003724 <_vfiprintf_r+0x4c>
 8003900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003902:	e711      	b.n	8003728 <_vfiprintf_r+0x50>
 8003904:	ab03      	add	r3, sp, #12
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	462a      	mov	r2, r5
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <_vfiprintf_r+0x258>)
 800390c:	a904      	add	r1, sp, #16
 800390e:	4630      	mov	r0, r6
 8003910:	f000 f880 	bl	8003a14 <_printf_i>
 8003914:	e7e4      	b.n	80038e0 <_vfiprintf_r+0x208>
 8003916:	bf00      	nop
 8003918:	08004314 	.word	0x08004314
 800391c:	08004334 	.word	0x08004334
 8003920:	080042f4 	.word	0x080042f4
 8003924:	08004354 	.word	0x08004354
 8003928:	0800435e 	.word	0x0800435e
 800392c:	00000000 	.word	0x00000000
 8003930:	080036b3 	.word	0x080036b3
 8003934:	0800435a 	.word	0x0800435a

08003938 <_printf_common>:
 8003938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	4616      	mov	r6, r2
 800393e:	4699      	mov	r9, r3
 8003940:	688a      	ldr	r2, [r1, #8]
 8003942:	690b      	ldr	r3, [r1, #16]
 8003944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003948:	4293      	cmp	r3, r2
 800394a:	bfb8      	it	lt
 800394c:	4613      	movlt	r3, r2
 800394e:	6033      	str	r3, [r6, #0]
 8003950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003954:	4607      	mov	r7, r0
 8003956:	460c      	mov	r4, r1
 8003958:	b10a      	cbz	r2, 800395e <_printf_common+0x26>
 800395a:	3301      	adds	r3, #1
 800395c:	6033      	str	r3, [r6, #0]
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	0699      	lsls	r1, r3, #26
 8003962:	bf42      	ittt	mi
 8003964:	6833      	ldrmi	r3, [r6, #0]
 8003966:	3302      	addmi	r3, #2
 8003968:	6033      	strmi	r3, [r6, #0]
 800396a:	6825      	ldr	r5, [r4, #0]
 800396c:	f015 0506 	ands.w	r5, r5, #6
 8003970:	d106      	bne.n	8003980 <_printf_common+0x48>
 8003972:	f104 0a19 	add.w	sl, r4, #25
 8003976:	68e3      	ldr	r3, [r4, #12]
 8003978:	6832      	ldr	r2, [r6, #0]
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	42ab      	cmp	r3, r5
 800397e:	dc26      	bgt.n	80039ce <_printf_common+0x96>
 8003980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003984:	1e13      	subs	r3, r2, #0
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	bf18      	it	ne
 800398a:	2301      	movne	r3, #1
 800398c:	0692      	lsls	r2, r2, #26
 800398e:	d42b      	bmi.n	80039e8 <_printf_common+0xb0>
 8003990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003994:	4649      	mov	r1, r9
 8003996:	4638      	mov	r0, r7
 8003998:	47c0      	blx	r8
 800399a:	3001      	adds	r0, #1
 800399c:	d01e      	beq.n	80039dc <_printf_common+0xa4>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	68e5      	ldr	r5, [r4, #12]
 80039a2:	6832      	ldr	r2, [r6, #0]
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	bf08      	it	eq
 80039ac:	1aad      	subeq	r5, r5, r2
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	2600      	movs	r6, #0
 80039c4:	341a      	adds	r4, #26
 80039c6:	42b5      	cmp	r5, r6
 80039c8:	d11a      	bne.n	8003a00 <_printf_common+0xc8>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e008      	b.n	80039e0 <_printf_common+0xa8>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4652      	mov	r2, sl
 80039d2:	4649      	mov	r1, r9
 80039d4:	4638      	mov	r0, r7
 80039d6:	47c0      	blx	r8
 80039d8:	3001      	adds	r0, #1
 80039da:	d103      	bne.n	80039e4 <_printf_common+0xac>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	3501      	adds	r5, #1
 80039e6:	e7c6      	b.n	8003976 <_printf_common+0x3e>
 80039e8:	18e1      	adds	r1, r4, r3
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	2030      	movs	r0, #48	; 0x30
 80039ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f2:	4422      	add	r2, r4
 80039f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fc:	3302      	adds	r3, #2
 80039fe:	e7c7      	b.n	8003990 <_printf_common+0x58>
 8003a00:	2301      	movs	r3, #1
 8003a02:	4622      	mov	r2, r4
 8003a04:	4649      	mov	r1, r9
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0e6      	beq.n	80039dc <_printf_common+0xa4>
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7d9      	b.n	80039c6 <_printf_common+0x8e>
	...

08003a14 <_printf_i>:
 8003a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	460c      	mov	r4, r1
 8003a1a:	4691      	mov	r9, r2
 8003a1c:	7e27      	ldrb	r7, [r4, #24]
 8003a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a20:	2f78      	cmp	r7, #120	; 0x78
 8003a22:	4680      	mov	r8, r0
 8003a24:	469a      	mov	sl, r3
 8003a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a2a:	d807      	bhi.n	8003a3c <_printf_i+0x28>
 8003a2c:	2f62      	cmp	r7, #98	; 0x62
 8003a2e:	d80a      	bhi.n	8003a46 <_printf_i+0x32>
 8003a30:	2f00      	cmp	r7, #0
 8003a32:	f000 80d8 	beq.w	8003be6 <_printf_i+0x1d2>
 8003a36:	2f58      	cmp	r7, #88	; 0x58
 8003a38:	f000 80a3 	beq.w	8003b82 <_printf_i+0x16e>
 8003a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a44:	e03a      	b.n	8003abc <_printf_i+0xa8>
 8003a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a4a:	2b15      	cmp	r3, #21
 8003a4c:	d8f6      	bhi.n	8003a3c <_printf_i+0x28>
 8003a4e:	a001      	add	r0, pc, #4	; (adr r0, 8003a54 <_printf_i+0x40>)
 8003a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003a3d 	.word	0x08003a3d
 8003a60:	08003a3d 	.word	0x08003a3d
 8003a64:	08003a3d 	.word	0x08003a3d
 8003a68:	08003a3d 	.word	0x08003a3d
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003a3d 	.word	0x08003a3d
 8003a74:	08003a3d 	.word	0x08003a3d
 8003a78:	08003a3d 	.word	0x08003a3d
 8003a7c:	08003a3d 	.word	0x08003a3d
 8003a80:	08003bcd 	.word	0x08003bcd
 8003a84:	08003af1 	.word	0x08003af1
 8003a88:	08003baf 	.word	0x08003baf
 8003a8c:	08003a3d 	.word	0x08003a3d
 8003a90:	08003a3d 	.word	0x08003a3d
 8003a94:	08003bef 	.word	0x08003bef
 8003a98:	08003a3d 	.word	0x08003a3d
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003a3d 	.word	0x08003a3d
 8003aa4:	08003a3d 	.word	0x08003a3d
 8003aa8:	08003bb7 	.word	0x08003bb7
 8003aac:	680b      	ldr	r3, [r1, #0]
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	600a      	str	r2, [r1, #0]
 8003ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0a3      	b.n	8003c08 <_printf_i+0x1f4>
 8003ac0:	6825      	ldr	r5, [r4, #0]
 8003ac2:	6808      	ldr	r0, [r1, #0]
 8003ac4:	062e      	lsls	r6, r5, #24
 8003ac6:	f100 0304 	add.w	r3, r0, #4
 8003aca:	d50a      	bpl.n	8003ae2 <_printf_i+0xce>
 8003acc:	6805      	ldr	r5, [r0, #0]
 8003ace:	600b      	str	r3, [r1, #0]
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	da03      	bge.n	8003adc <_printf_i+0xc8>
 8003ad4:	232d      	movs	r3, #45	; 0x2d
 8003ad6:	426d      	negs	r5, r5
 8003ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003adc:	485e      	ldr	r0, [pc, #376]	; (8003c58 <_printf_i+0x244>)
 8003ade:	230a      	movs	r3, #10
 8003ae0:	e019      	b.n	8003b16 <_printf_i+0x102>
 8003ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ae6:	6805      	ldr	r5, [r0, #0]
 8003ae8:	600b      	str	r3, [r1, #0]
 8003aea:	bf18      	it	ne
 8003aec:	b22d      	sxthne	r5, r5
 8003aee:	e7ef      	b.n	8003ad0 <_printf_i+0xbc>
 8003af0:	680b      	ldr	r3, [r1, #0]
 8003af2:	6825      	ldr	r5, [r4, #0]
 8003af4:	1d18      	adds	r0, r3, #4
 8003af6:	6008      	str	r0, [r1, #0]
 8003af8:	0628      	lsls	r0, r5, #24
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0xec>
 8003afc:	681d      	ldr	r5, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0xf2>
 8003b00:	0669      	lsls	r1, r5, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0xe8>
 8003b04:	881d      	ldrh	r5, [r3, #0]
 8003b06:	4854      	ldr	r0, [pc, #336]	; (8003c58 <_printf_i+0x244>)
 8003b08:	2f6f      	cmp	r7, #111	; 0x6f
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2308      	moveq	r3, #8
 8003b0e:	230a      	movne	r3, #10
 8003b10:	2100      	movs	r1, #0
 8003b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b16:	6866      	ldr	r6, [r4, #4]
 8003b18:	60a6      	str	r6, [r4, #8]
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	bfa2      	ittt	ge
 8003b1e:	6821      	ldrge	r1, [r4, #0]
 8003b20:	f021 0104 	bicge.w	r1, r1, #4
 8003b24:	6021      	strge	r1, [r4, #0]
 8003b26:	b90d      	cbnz	r5, 8003b2c <_printf_i+0x118>
 8003b28:	2e00      	cmp	r6, #0
 8003b2a:	d04d      	beq.n	8003bc8 <_printf_i+0x1b4>
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b32:	fb03 5711 	mls	r7, r3, r1, r5
 8003b36:	5dc7      	ldrb	r7, [r0, r7]
 8003b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b3c:	462f      	mov	r7, r5
 8003b3e:	42bb      	cmp	r3, r7
 8003b40:	460d      	mov	r5, r1
 8003b42:	d9f4      	bls.n	8003b2e <_printf_i+0x11a>
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d10b      	bne.n	8003b60 <_printf_i+0x14c>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	07df      	lsls	r7, r3, #31
 8003b4c:	d508      	bpl.n	8003b60 <_printf_i+0x14c>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	6861      	ldr	r1, [r4, #4]
 8003b52:	4299      	cmp	r1, r3
 8003b54:	bfde      	ittt	le
 8003b56:	2330      	movle	r3, #48	; 0x30
 8003b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b60:	1b92      	subs	r2, r2, r6
 8003b62:	6122      	str	r2, [r4, #16]
 8003b64:	f8cd a000 	str.w	sl, [sp]
 8003b68:	464b      	mov	r3, r9
 8003b6a:	aa03      	add	r2, sp, #12
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4640      	mov	r0, r8
 8003b70:	f7ff fee2 	bl	8003938 <_printf_common>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d14c      	bne.n	8003c12 <_printf_i+0x1fe>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	b004      	add	sp, #16
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	4835      	ldr	r0, [pc, #212]	; (8003c58 <_printf_i+0x244>)
 8003b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	680e      	ldr	r6, [r1, #0]
 8003b8c:	061f      	lsls	r7, r3, #24
 8003b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b92:	600e      	str	r6, [r1, #0]
 8003b94:	d514      	bpl.n	8003bc0 <_printf_i+0x1ac>
 8003b96:	07d9      	lsls	r1, r3, #31
 8003b98:	bf44      	itt	mi
 8003b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9e:	6023      	strmi	r3, [r4, #0]
 8003ba0:	b91d      	cbnz	r5, 8003baa <_printf_i+0x196>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	f023 0320 	bic.w	r3, r3, #32
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	2310      	movs	r3, #16
 8003bac:	e7b0      	b.n	8003b10 <_printf_i+0xfc>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f043 0320 	orr.w	r3, r3, #32
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	2378      	movs	r3, #120	; 0x78
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <_printf_i+0x248>)
 8003bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bbe:	e7e3      	b.n	8003b88 <_printf_i+0x174>
 8003bc0:	065e      	lsls	r6, r3, #25
 8003bc2:	bf48      	it	mi
 8003bc4:	b2ad      	uxthmi	r5, r5
 8003bc6:	e7e6      	b.n	8003b96 <_printf_i+0x182>
 8003bc8:	4616      	mov	r6, r2
 8003bca:	e7bb      	b.n	8003b44 <_printf_i+0x130>
 8003bcc:	680b      	ldr	r3, [r1, #0]
 8003bce:	6826      	ldr	r6, [r4, #0]
 8003bd0:	6960      	ldr	r0, [r4, #20]
 8003bd2:	1d1d      	adds	r5, r3, #4
 8003bd4:	600d      	str	r5, [r1, #0]
 8003bd6:	0635      	lsls	r5, r6, #24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	d501      	bpl.n	8003be0 <_printf_i+0x1cc>
 8003bdc:	6018      	str	r0, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <_printf_i+0x1d2>
 8003be0:	0671      	lsls	r1, r6, #25
 8003be2:	d5fb      	bpl.n	8003bdc <_printf_i+0x1c8>
 8003be4:	8018      	strh	r0, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	4616      	mov	r6, r2
 8003bec:	e7ba      	b.n	8003b64 <_printf_i+0x150>
 8003bee:	680b      	ldr	r3, [r1, #0]
 8003bf0:	1d1a      	adds	r2, r3, #4
 8003bf2:	600a      	str	r2, [r1, #0]
 8003bf4:	681e      	ldr	r6, [r3, #0]
 8003bf6:	6862      	ldr	r2, [r4, #4]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7fc fb08 	bl	8000210 <memchr>
 8003c00:	b108      	cbz	r0, 8003c06 <_printf_i+0x1f2>
 8003c02:	1b80      	subs	r0, r0, r6
 8003c04:	6060      	str	r0, [r4, #4]
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c10:	e7a8      	b.n	8003b64 <_printf_i+0x150>
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	4632      	mov	r2, r6
 8003c16:	4649      	mov	r1, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	47d0      	blx	sl
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d0ab      	beq.n	8003b78 <_printf_i+0x164>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	079b      	lsls	r3, r3, #30
 8003c24:	d413      	bmi.n	8003c4e <_printf_i+0x23a>
 8003c26:	68e0      	ldr	r0, [r4, #12]
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	4298      	cmp	r0, r3
 8003c2c:	bfb8      	it	lt
 8003c2e:	4618      	movlt	r0, r3
 8003c30:	e7a4      	b.n	8003b7c <_printf_i+0x168>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4632      	mov	r2, r6
 8003c36:	4649      	mov	r1, r9
 8003c38:	4640      	mov	r0, r8
 8003c3a:	47d0      	blx	sl
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d09b      	beq.n	8003b78 <_printf_i+0x164>
 8003c40:	3501      	adds	r5, #1
 8003c42:	68e3      	ldr	r3, [r4, #12]
 8003c44:	9903      	ldr	r1, [sp, #12]
 8003c46:	1a5b      	subs	r3, r3, r1
 8003c48:	42ab      	cmp	r3, r5
 8003c4a:	dcf2      	bgt.n	8003c32 <_printf_i+0x21e>
 8003c4c:	e7eb      	b.n	8003c26 <_printf_i+0x212>
 8003c4e:	2500      	movs	r5, #0
 8003c50:	f104 0619 	add.w	r6, r4, #25
 8003c54:	e7f5      	b.n	8003c42 <_printf_i+0x22e>
 8003c56:	bf00      	nop
 8003c58:	08004365 	.word	0x08004365
 8003c5c:	08004376 	.word	0x08004376

08003c60 <_sbrk_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d06      	ldr	r5, [pc, #24]	; (8003c7c <_sbrk_r+0x1c>)
 8003c64:	2300      	movs	r3, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	f7fd fa16 	bl	800109c <_sbrk>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_sbrk_r+0x1a>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_sbrk_r+0x1a>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000158 	.word	0x20000158

08003c80 <__sread>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	460c      	mov	r4, r1
 8003c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c88:	f000 fab4 	bl	80041f4 <_read_r>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	bfab      	itete	ge
 8003c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c92:	89a3      	ldrhlt	r3, [r4, #12]
 8003c94:	181b      	addge	r3, r3, r0
 8003c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c9a:	bfac      	ite	ge
 8003c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c9e:	81a3      	strhlt	r3, [r4, #12]
 8003ca0:	bd10      	pop	{r4, pc}

08003ca2 <__swrite>:
 8003ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	898b      	ldrh	r3, [r1, #12]
 8003caa:	05db      	lsls	r3, r3, #23
 8003cac:	4605      	mov	r5, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	d505      	bpl.n	8003cc0 <__swrite+0x1e>
 8003cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb8:	2302      	movs	r3, #2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f000 f9c8 	bl	8004050 <_lseek_r>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	4632      	mov	r2, r6
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	f000 b869 	b.w	8003dac <_write_r>

08003cda <__sseek>:
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	460c      	mov	r4, r1
 8003cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce2:	f000 f9b5 	bl	8004050 <_lseek_r>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	bf15      	itete	ne
 8003cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cf6:	81a3      	strheq	r3, [r4, #12]
 8003cf8:	bf18      	it	ne
 8003cfa:	81a3      	strhne	r3, [r4, #12]
 8003cfc:	bd10      	pop	{r4, pc}

08003cfe <__sclose>:
 8003cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d02:	f000 b8d3 	b.w	8003eac <_close_r>
	...

08003d08 <__swbuf_r>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	4605      	mov	r5, r0
 8003d10:	b118      	cbz	r0, 8003d1a <__swbuf_r+0x12>
 8003d12:	6983      	ldr	r3, [r0, #24]
 8003d14:	b90b      	cbnz	r3, 8003d1a <__swbuf_r+0x12>
 8003d16:	f7ff fbbb 	bl	8003490 <__sinit>
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <__swbuf_r+0x98>)
 8003d1c:	429c      	cmp	r4, r3
 8003d1e:	d12b      	bne.n	8003d78 <__swbuf_r+0x70>
 8003d20:	686c      	ldr	r4, [r5, #4]
 8003d22:	69a3      	ldr	r3, [r4, #24]
 8003d24:	60a3      	str	r3, [r4, #8]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	071a      	lsls	r2, r3, #28
 8003d2a:	d52f      	bpl.n	8003d8c <__swbuf_r+0x84>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	b36b      	cbz	r3, 8003d8c <__swbuf_r+0x84>
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	1ac0      	subs	r0, r0, r3
 8003d36:	6963      	ldr	r3, [r4, #20]
 8003d38:	b2f6      	uxtb	r6, r6
 8003d3a:	4283      	cmp	r3, r0
 8003d3c:	4637      	mov	r7, r6
 8003d3e:	dc04      	bgt.n	8003d4a <__swbuf_r+0x42>
 8003d40:	4621      	mov	r1, r4
 8003d42:	4628      	mov	r0, r5
 8003d44:	f000 f948 	bl	8003fd8 <_fflush_r>
 8003d48:	bb30      	cbnz	r0, 8003d98 <__swbuf_r+0x90>
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	701e      	strb	r6, [r3, #0]
 8003d58:	6963      	ldr	r3, [r4, #20]
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	4283      	cmp	r3, r0
 8003d5e:	d004      	beq.n	8003d6a <__swbuf_r+0x62>
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	07db      	lsls	r3, r3, #31
 8003d64:	d506      	bpl.n	8003d74 <__swbuf_r+0x6c>
 8003d66:	2e0a      	cmp	r6, #10
 8003d68:	d104      	bne.n	8003d74 <__swbuf_r+0x6c>
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f000 f933 	bl	8003fd8 <_fflush_r>
 8003d72:	b988      	cbnz	r0, 8003d98 <__swbuf_r+0x90>
 8003d74:	4638      	mov	r0, r7
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <__swbuf_r+0x9c>)
 8003d7a:	429c      	cmp	r4, r3
 8003d7c:	d101      	bne.n	8003d82 <__swbuf_r+0x7a>
 8003d7e:	68ac      	ldr	r4, [r5, #8]
 8003d80:	e7cf      	b.n	8003d22 <__swbuf_r+0x1a>
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <__swbuf_r+0xa0>)
 8003d84:	429c      	cmp	r4, r3
 8003d86:	bf08      	it	eq
 8003d88:	68ec      	ldreq	r4, [r5, #12]
 8003d8a:	e7ca      	b.n	8003d22 <__swbuf_r+0x1a>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f81e 	bl	8003dd0 <__swsetup_r>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d0cb      	beq.n	8003d30 <__swbuf_r+0x28>
 8003d98:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9c:	e7ea      	b.n	8003d74 <__swbuf_r+0x6c>
 8003d9e:	bf00      	nop
 8003da0:	08004314 	.word	0x08004314
 8003da4:	08004334 	.word	0x08004334
 8003da8:	080042f4 	.word	0x080042f4

08003dac <_write_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4d07      	ldr	r5, [pc, #28]	; (8003dcc <_write_r+0x20>)
 8003db0:	4604      	mov	r4, r0
 8003db2:	4608      	mov	r0, r1
 8003db4:	4611      	mov	r1, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	602a      	str	r2, [r5, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7fd f91d 	bl	8000ffa <_write>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_write_r+0x1e>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_write_r+0x1e>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	20000158 	.word	0x20000158

08003dd0 <__swsetup_r>:
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <__swsetup_r+0xcc>)
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	b125      	cbz	r5, 8003de6 <__swsetup_r+0x16>
 8003ddc:	69ab      	ldr	r3, [r5, #24]
 8003dde:	b913      	cbnz	r3, 8003de6 <__swsetup_r+0x16>
 8003de0:	4628      	mov	r0, r5
 8003de2:	f7ff fb55 	bl	8003490 <__sinit>
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <__swsetup_r+0xd0>)
 8003de8:	429c      	cmp	r4, r3
 8003dea:	d10f      	bne.n	8003e0c <__swsetup_r+0x3c>
 8003dec:	686c      	ldr	r4, [r5, #4]
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003df4:	0719      	lsls	r1, r3, #28
 8003df6:	d42c      	bmi.n	8003e52 <__swsetup_r+0x82>
 8003df8:	06dd      	lsls	r5, r3, #27
 8003dfa:	d411      	bmi.n	8003e20 <__swsetup_r+0x50>
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0a:	e03e      	b.n	8003e8a <__swsetup_r+0xba>
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <__swsetup_r+0xd4>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d101      	bne.n	8003e16 <__swsetup_r+0x46>
 8003e12:	68ac      	ldr	r4, [r5, #8]
 8003e14:	e7eb      	b.n	8003dee <__swsetup_r+0x1e>
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <__swsetup_r+0xd8>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	bf08      	it	eq
 8003e1c:	68ec      	ldreq	r4, [r5, #12]
 8003e1e:	e7e6      	b.n	8003dee <__swsetup_r+0x1e>
 8003e20:	0758      	lsls	r0, r3, #29
 8003e22:	d512      	bpl.n	8003e4a <__swsetup_r+0x7a>
 8003e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e26:	b141      	cbz	r1, 8003e3a <__swsetup_r+0x6a>
 8003e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	d002      	beq.n	8003e36 <__swsetup_r+0x66>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 f98f 	bl	8004154 <_free_r>
 8003e36:	2300      	movs	r3, #0
 8003e38:	6363      	str	r3, [r4, #52]	; 0x34
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	2300      	movs	r3, #0
 8003e44:	6063      	str	r3, [r4, #4]
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f043 0308 	orr.w	r3, r3, #8
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	6923      	ldr	r3, [r4, #16]
 8003e54:	b94b      	cbnz	r3, 8003e6a <__swsetup_r+0x9a>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d003      	beq.n	8003e6a <__swsetup_r+0x9a>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 f929 	bl	80040bc <__smakebuf_r>
 8003e6a:	89a0      	ldrh	r0, [r4, #12]
 8003e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e70:	f010 0301 	ands.w	r3, r0, #1
 8003e74:	d00a      	beq.n	8003e8c <__swsetup_r+0xbc>
 8003e76:	2300      	movs	r3, #0
 8003e78:	60a3      	str	r3, [r4, #8]
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	61a3      	str	r3, [r4, #24]
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	b943      	cbnz	r3, 8003e96 <__swsetup_r+0xc6>
 8003e84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e88:	d1ba      	bne.n	8003e00 <__swsetup_r+0x30>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	0781      	lsls	r1, r0, #30
 8003e8e:	bf58      	it	pl
 8003e90:	6963      	ldrpl	r3, [r4, #20]
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	e7f4      	b.n	8003e80 <__swsetup_r+0xb0>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e7f7      	b.n	8003e8a <__swsetup_r+0xba>
 8003e9a:	bf00      	nop
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	08004314 	.word	0x08004314
 8003ea4:	08004334 	.word	0x08004334
 8003ea8:	080042f4 	.word	0x080042f4

08003eac <_close_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4d06      	ldr	r5, [pc, #24]	; (8003ec8 <_close_r+0x1c>)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fd f8bb 	bl	8001032 <_close>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_close_r+0x1a>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_close_r+0x1a>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	20000158 	.word	0x20000158

08003ecc <__sflush_r>:
 8003ecc:	898a      	ldrh	r2, [r1, #12]
 8003ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	0710      	lsls	r0, r2, #28
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	d458      	bmi.n	8003f8c <__sflush_r+0xc0>
 8003eda:	684b      	ldr	r3, [r1, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dc05      	bgt.n	8003eec <__sflush_r+0x20>
 8003ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dc02      	bgt.n	8003eec <__sflush_r+0x20>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eee:	2e00      	cmp	r6, #0
 8003ef0:	d0f9      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ef8:	682f      	ldr	r7, [r5, #0]
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	d032      	beq.n	8003f64 <__sflush_r+0x98>
 8003efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	075a      	lsls	r2, r3, #29
 8003f04:	d505      	bpl.n	8003f12 <__sflush_r+0x46>
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f0c:	b10b      	cbz	r3, 8003f12 <__sflush_r+0x46>
 8003f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f10:	1ac0      	subs	r0, r0, r3
 8003f12:	2300      	movs	r3, #0
 8003f14:	4602      	mov	r2, r0
 8003f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f18:	6a21      	ldr	r1, [r4, #32]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b0      	blx	r6
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	d106      	bne.n	8003f32 <__sflush_r+0x66>
 8003f24:	6829      	ldr	r1, [r5, #0]
 8003f26:	291d      	cmp	r1, #29
 8003f28:	d82c      	bhi.n	8003f84 <__sflush_r+0xb8>
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <__sflush_r+0x108>)
 8003f2c:	40ca      	lsrs	r2, r1
 8003f2e:	07d6      	lsls	r6, r2, #31
 8003f30:	d528      	bpl.n	8003f84 <__sflush_r+0xb8>
 8003f32:	2200      	movs	r2, #0
 8003f34:	6062      	str	r2, [r4, #4]
 8003f36:	04d9      	lsls	r1, r3, #19
 8003f38:	6922      	ldr	r2, [r4, #16]
 8003f3a:	6022      	str	r2, [r4, #0]
 8003f3c:	d504      	bpl.n	8003f48 <__sflush_r+0x7c>
 8003f3e:	1c42      	adds	r2, r0, #1
 8003f40:	d101      	bne.n	8003f46 <__sflush_r+0x7a>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	b903      	cbnz	r3, 8003f48 <__sflush_r+0x7c>
 8003f46:	6560      	str	r0, [r4, #84]	; 0x54
 8003f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4a:	602f      	str	r7, [r5, #0]
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d0ca      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d002      	beq.n	8003f5e <__sflush_r+0x92>
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 f8fb 	bl	8004154 <_free_r>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	6360      	str	r0, [r4, #52]	; 0x34
 8003f62:	e7c1      	b.n	8003ee8 <__sflush_r+0x1c>
 8003f64:	6a21      	ldr	r1, [r4, #32]
 8003f66:	2301      	movs	r3, #1
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b0      	blx	r6
 8003f6c:	1c41      	adds	r1, r0, #1
 8003f6e:	d1c7      	bne.n	8003f00 <__sflush_r+0x34>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0c4      	beq.n	8003f00 <__sflush_r+0x34>
 8003f76:	2b1d      	cmp	r3, #29
 8003f78:	d001      	beq.n	8003f7e <__sflush_r+0xb2>
 8003f7a:	2b16      	cmp	r3, #22
 8003f7c:	d101      	bne.n	8003f82 <__sflush_r+0xb6>
 8003f7e:	602f      	str	r7, [r5, #0]
 8003f80:	e7b1      	b.n	8003ee6 <__sflush_r+0x1a>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	e7ad      	b.n	8003ee8 <__sflush_r+0x1c>
 8003f8c:	690f      	ldr	r7, [r1, #16]
 8003f8e:	2f00      	cmp	r7, #0
 8003f90:	d0a9      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003f92:	0793      	lsls	r3, r2, #30
 8003f94:	680e      	ldr	r6, [r1, #0]
 8003f96:	bf08      	it	eq
 8003f98:	694b      	ldreq	r3, [r1, #20]
 8003f9a:	600f      	str	r7, [r1, #0]
 8003f9c:	bf18      	it	ne
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	eba6 0807 	sub.w	r8, r6, r7
 8003fa4:	608b      	str	r3, [r1, #8]
 8003fa6:	f1b8 0f00 	cmp.w	r8, #0
 8003faa:	dd9c      	ble.n	8003ee6 <__sflush_r+0x1a>
 8003fac:	6a21      	ldr	r1, [r4, #32]
 8003fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	463a      	mov	r2, r7
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b0      	blx	r6
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	dc06      	bgt.n	8003fca <__sflush_r+0xfe>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc2:	81a3      	strh	r3, [r4, #12]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	e78e      	b.n	8003ee8 <__sflush_r+0x1c>
 8003fca:	4407      	add	r7, r0
 8003fcc:	eba8 0800 	sub.w	r8, r8, r0
 8003fd0:	e7e9      	b.n	8003fa6 <__sflush_r+0xda>
 8003fd2:	bf00      	nop
 8003fd4:	20400001 	.word	0x20400001

08003fd8 <_fflush_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	4605      	mov	r5, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	b913      	cbnz	r3, 8003fe8 <_fflush_r+0x10>
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	b118      	cbz	r0, 8003ff2 <_fflush_r+0x1a>
 8003fea:	6983      	ldr	r3, [r0, #24]
 8003fec:	b90b      	cbnz	r3, 8003ff2 <_fflush_r+0x1a>
 8003fee:	f7ff fa4f 	bl	8003490 <__sinit>
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <_fflush_r+0x6c>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	d11b      	bne.n	8004030 <_fflush_r+0x58>
 8003ff8:	686c      	ldr	r4, [r5, #4]
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ef      	beq.n	8003fe2 <_fflush_r+0xa>
 8004002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004004:	07d0      	lsls	r0, r2, #31
 8004006:	d404      	bmi.n	8004012 <_fflush_r+0x3a>
 8004008:	0599      	lsls	r1, r3, #22
 800400a:	d402      	bmi.n	8004012 <_fflush_r+0x3a>
 800400c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800400e:	f7ff fadd 	bl	80035cc <__retarget_lock_acquire_recursive>
 8004012:	4628      	mov	r0, r5
 8004014:	4621      	mov	r1, r4
 8004016:	f7ff ff59 	bl	8003ecc <__sflush_r>
 800401a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800401c:	07da      	lsls	r2, r3, #31
 800401e:	4605      	mov	r5, r0
 8004020:	d4e0      	bmi.n	8003fe4 <_fflush_r+0xc>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	059b      	lsls	r3, r3, #22
 8004026:	d4dd      	bmi.n	8003fe4 <_fflush_r+0xc>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f7ff fad0 	bl	80035ce <__retarget_lock_release_recursive>
 800402e:	e7d9      	b.n	8003fe4 <_fflush_r+0xc>
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <_fflush_r+0x70>)
 8004032:	429c      	cmp	r4, r3
 8004034:	d101      	bne.n	800403a <_fflush_r+0x62>
 8004036:	68ac      	ldr	r4, [r5, #8]
 8004038:	e7df      	b.n	8003ffa <_fflush_r+0x22>
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <_fflush_r+0x74>)
 800403c:	429c      	cmp	r4, r3
 800403e:	bf08      	it	eq
 8004040:	68ec      	ldreq	r4, [r5, #12]
 8004042:	e7da      	b.n	8003ffa <_fflush_r+0x22>
 8004044:	08004314 	.word	0x08004314
 8004048:	08004334 	.word	0x08004334
 800404c:	080042f4 	.word	0x080042f4

08004050 <_lseek_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	; (8004070 <_lseek_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fd f80e 	bl	8001080 <_lseek>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_lseek_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_lseek_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000158 	.word	0x20000158

08004074 <__swhatbuf_r>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	460e      	mov	r6, r1
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	2900      	cmp	r1, #0
 800407e:	b096      	sub	sp, #88	; 0x58
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	da07      	bge.n	8004096 <__swhatbuf_r+0x22>
 8004086:	2300      	movs	r3, #0
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	89b3      	ldrh	r3, [r6, #12]
 800408c:	061a      	lsls	r2, r3, #24
 800408e:	d410      	bmi.n	80040b2 <__swhatbuf_r+0x3e>
 8004090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004094:	e00e      	b.n	80040b4 <__swhatbuf_r+0x40>
 8004096:	466a      	mov	r2, sp
 8004098:	f000 f8be 	bl	8004218 <_fstat_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	dbf2      	blt.n	8004086 <__swhatbuf_r+0x12>
 80040a0:	9a01      	ldr	r2, [sp, #4]
 80040a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040aa:	425a      	negs	r2, r3
 80040ac:	415a      	adcs	r2, r3
 80040ae:	602a      	str	r2, [r5, #0]
 80040b0:	e7ee      	b.n	8004090 <__swhatbuf_r+0x1c>
 80040b2:	2340      	movs	r3, #64	; 0x40
 80040b4:	2000      	movs	r0, #0
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	b016      	add	sp, #88	; 0x58
 80040ba:	bd70      	pop	{r4, r5, r6, pc}

080040bc <__smakebuf_r>:
 80040bc:	898b      	ldrh	r3, [r1, #12]
 80040be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040c0:	079d      	lsls	r5, r3, #30
 80040c2:	4606      	mov	r6, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	d507      	bpl.n	80040d8 <__smakebuf_r+0x1c>
 80040c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	6123      	str	r3, [r4, #16]
 80040d0:	2301      	movs	r3, #1
 80040d2:	6163      	str	r3, [r4, #20]
 80040d4:	b002      	add	sp, #8
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	ab01      	add	r3, sp, #4
 80040da:	466a      	mov	r2, sp
 80040dc:	f7ff ffca 	bl	8004074 <__swhatbuf_r>
 80040e0:	9900      	ldr	r1, [sp, #0]
 80040e2:	4605      	mov	r5, r0
 80040e4:	4630      	mov	r0, r6
 80040e6:	f7ff fa73 	bl	80035d0 <_malloc_r>
 80040ea:	b948      	cbnz	r0, 8004100 <__smakebuf_r+0x44>
 80040ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f0:	059a      	lsls	r2, r3, #22
 80040f2:	d4ef      	bmi.n	80040d4 <__smakebuf_r+0x18>
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	81a3      	strh	r3, [r4, #12]
 80040fe:	e7e3      	b.n	80040c8 <__smakebuf_r+0xc>
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <__smakebuf_r+0x7c>)
 8004102:	62b3      	str	r3, [r6, #40]	; 0x28
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	6020      	str	r0, [r4, #0]
 8004108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	9b00      	ldr	r3, [sp, #0]
 8004110:	6163      	str	r3, [r4, #20]
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	6120      	str	r0, [r4, #16]
 8004116:	b15b      	cbz	r3, 8004130 <__smakebuf_r+0x74>
 8004118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800411c:	4630      	mov	r0, r6
 800411e:	f000 f88d 	bl	800423c <_isatty_r>
 8004122:	b128      	cbz	r0, 8004130 <__smakebuf_r+0x74>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	89a0      	ldrh	r0, [r4, #12]
 8004132:	4305      	orrs	r5, r0
 8004134:	81a5      	strh	r5, [r4, #12]
 8004136:	e7cd      	b.n	80040d4 <__smakebuf_r+0x18>
 8004138:	08003429 	.word	0x08003429

0800413c <__malloc_lock>:
 800413c:	4801      	ldr	r0, [pc, #4]	; (8004144 <__malloc_lock+0x8>)
 800413e:	f7ff ba45 	b.w	80035cc <__retarget_lock_acquire_recursive>
 8004142:	bf00      	nop
 8004144:	20000150 	.word	0x20000150

08004148 <__malloc_unlock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_unlock+0x8>)
 800414a:	f7ff ba40 	b.w	80035ce <__retarget_lock_release_recursive>
 800414e:	bf00      	nop
 8004150:	20000150 	.word	0x20000150

08004154 <_free_r>:
 8004154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004156:	2900      	cmp	r1, #0
 8004158:	d048      	beq.n	80041ec <_free_r+0x98>
 800415a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800415e:	9001      	str	r0, [sp, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f1a1 0404 	sub.w	r4, r1, #4
 8004166:	bfb8      	it	lt
 8004168:	18e4      	addlt	r4, r4, r3
 800416a:	f7ff ffe7 	bl	800413c <__malloc_lock>
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <_free_r+0x9c>)
 8004170:	9801      	ldr	r0, [sp, #4]
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	4615      	mov	r5, r2
 8004176:	b933      	cbnz	r3, 8004186 <_free_r+0x32>
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	6014      	str	r4, [r2, #0]
 800417c:	b003      	add	sp, #12
 800417e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004182:	f7ff bfe1 	b.w	8004148 <__malloc_unlock>
 8004186:	42a3      	cmp	r3, r4
 8004188:	d90b      	bls.n	80041a2 <_free_r+0x4e>
 800418a:	6821      	ldr	r1, [r4, #0]
 800418c:	1862      	adds	r2, r4, r1
 800418e:	4293      	cmp	r3, r2
 8004190:	bf04      	itt	eq
 8004192:	681a      	ldreq	r2, [r3, #0]
 8004194:	685b      	ldreq	r3, [r3, #4]
 8004196:	6063      	str	r3, [r4, #4]
 8004198:	bf04      	itt	eq
 800419a:	1852      	addeq	r2, r2, r1
 800419c:	6022      	streq	r2, [r4, #0]
 800419e:	602c      	str	r4, [r5, #0]
 80041a0:	e7ec      	b.n	800417c <_free_r+0x28>
 80041a2:	461a      	mov	r2, r3
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	b10b      	cbz	r3, 80041ac <_free_r+0x58>
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	d9fa      	bls.n	80041a2 <_free_r+0x4e>
 80041ac:	6811      	ldr	r1, [r2, #0]
 80041ae:	1855      	adds	r5, r2, r1
 80041b0:	42a5      	cmp	r5, r4
 80041b2:	d10b      	bne.n	80041cc <_free_r+0x78>
 80041b4:	6824      	ldr	r4, [r4, #0]
 80041b6:	4421      	add	r1, r4
 80041b8:	1854      	adds	r4, r2, r1
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	6011      	str	r1, [r2, #0]
 80041be:	d1dd      	bne.n	800417c <_free_r+0x28>
 80041c0:	681c      	ldr	r4, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	6053      	str	r3, [r2, #4]
 80041c6:	4421      	add	r1, r4
 80041c8:	6011      	str	r1, [r2, #0]
 80041ca:	e7d7      	b.n	800417c <_free_r+0x28>
 80041cc:	d902      	bls.n	80041d4 <_free_r+0x80>
 80041ce:	230c      	movs	r3, #12
 80041d0:	6003      	str	r3, [r0, #0]
 80041d2:	e7d3      	b.n	800417c <_free_r+0x28>
 80041d4:	6825      	ldr	r5, [r4, #0]
 80041d6:	1961      	adds	r1, r4, r5
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf04      	itt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	6063      	str	r3, [r4, #4]
 80041e2:	bf04      	itt	eq
 80041e4:	1949      	addeq	r1, r1, r5
 80041e6:	6021      	streq	r1, [r4, #0]
 80041e8:	6054      	str	r4, [r2, #4]
 80041ea:	e7c7      	b.n	800417c <_free_r+0x28>
 80041ec:	b003      	add	sp, #12
 80041ee:	bd30      	pop	{r4, r5, pc}
 80041f0:	20000090 	.word	0x20000090

080041f4 <_read_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4d07      	ldr	r5, [pc, #28]	; (8004214 <_read_r+0x20>)
 80041f8:	4604      	mov	r4, r0
 80041fa:	4608      	mov	r0, r1
 80041fc:	4611      	mov	r1, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	602a      	str	r2, [r5, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	f7fc fedc 	bl	8000fc0 <_read>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_read_r+0x1e>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	b103      	cbz	r3, 8004212 <_read_r+0x1e>
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	20000158 	.word	0x20000158

08004218 <_fstat_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d07      	ldr	r5, [pc, #28]	; (8004238 <_fstat_r+0x20>)
 800421c:	2300      	movs	r3, #0
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	f7fc ff10 	bl	800104a <_fstat>
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d102      	bne.n	8004234 <_fstat_r+0x1c>
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	b103      	cbz	r3, 8004234 <_fstat_r+0x1c>
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	bd38      	pop	{r3, r4, r5, pc}
 8004236:	bf00      	nop
 8004238:	20000158 	.word	0x20000158

0800423c <_isatty_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4d06      	ldr	r5, [pc, #24]	; (8004258 <_isatty_r+0x1c>)
 8004240:	2300      	movs	r3, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	f7fc ff0f 	bl	800106a <_isatty>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_isatty_r+0x1a>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_isatty_r+0x1a>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	20000158 	.word	0x20000158

0800425c <_init>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr

08004268 <_fini>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr
